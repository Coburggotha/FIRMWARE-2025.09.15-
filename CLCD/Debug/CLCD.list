
CLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000455c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004668  08004668  00005668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b8  080047b8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080047c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  08004828  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004828  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e298  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e09  00000000  00000000  00014329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00016138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c30  00000000  00000000  000170a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b0e  00000000  00000000  00017cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110bf  00000000  00000000  000307de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9b9  00000000  00000000  0004189d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  000d029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d4df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004650 	.word	0x08004650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004650 	.word	0x08004650

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f002 ff2a 	bl	8002fcc <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f002 ff23 	bl	8002fcc <HAL_UART_Transmit>

  return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08004668 	.word	0x08004668
 8000194:	20000120 	.word	0x20000120

08000198 <I2C_ScanAddresses>:

void I2C_ScanAddresses(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C addresses...\r\n");
 800019e:	4813      	ldr	r0, [pc, #76]	@ (80001ec <I2C_ScanAddresses+0x54>)
 80001a0:	f003 fa12 	bl	80035c8 <puts>

    for (i = 1; i < 128; i++) {
 80001a4:	2301      	movs	r3, #1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	e015      	b.n	80001d6 <I2C_ScanAddresses+0x3e>
        /*
         * HAL_I2C_IsDeviceReady: If a device at the specified address exists return HAL_OK.
         * Since I2C devices must have an 8-bit address, the 7-bit address is shifted left by 1 bit.
         */
        result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 1, 10);
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	b299      	uxth	r1, r3
 80001b2:	230a      	movs	r3, #10
 80001b4:	2201      	movs	r2, #1
 80001b6:	480e      	ldr	r0, [pc, #56]	@ (80001f0 <I2C_ScanAddresses+0x58>)
 80001b8:	f001 fc5c 	bl	8001a74 <HAL_I2C_IsDeviceReady>
 80001bc:	4603      	mov	r3, r0
 80001be:	71bb      	strb	r3, [r7, #6]
        if (result == HAL_OK) {
 80001c0:	79bb      	ldrb	r3, [r7, #6]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d104      	bne.n	80001d0 <I2C_ScanAddresses+0x38>
            printf("I2C device found at address 0x%02X\r\n", i);
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	4619      	mov	r1, r3
 80001ca:	480a      	ldr	r0, [pc, #40]	@ (80001f4 <I2C_ScanAddresses+0x5c>)
 80001cc:	f003 f994 	bl	80034f8 <iprintf>
    for (i = 1; i < 128; i++) {
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	3301      	adds	r3, #1
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	dae5      	bge.n	80001aa <I2C_ScanAddresses+0x12>
        }
    }

    printf("Scan complete.\r\n");
 80001de:	4806      	ldr	r0, [pc, #24]	@ (80001f8 <I2C_ScanAddresses+0x60>)
 80001e0:	f003 f9f2 	bl	80035c8 <puts>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	0800466c 	.word	0x0800466c
 80001f0:	20000084 	.word	0x20000084
 80001f4:	08004688 	.word	0x08004688
 80001f8:	080046b0 	.word	0x080046b0

080001fc <delay_us>:

void delay_us(int us){
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	value = 3;
 8000204:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <delay_us+0x40>)
 8000206:	2203      	movs	r2, #3
 8000208:	601a      	str	r2, [r3, #0]
	delay = us * value;
 800020a:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <delay_us+0x40>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	fb02 f303 	mul.w	r3, r2, r3
 8000214:	4a0a      	ldr	r2, [pc, #40]	@ (8000240 <delay_us+0x44>)
 8000216:	6013      	str	r3, [r2, #0]
	for(int i=0;i < delay;i++);
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e002      	b.n	8000224 <delay_us+0x28>
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <delay_us+0x44>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	429a      	cmp	r2, r3
 800022c:	dbf7      	blt.n	800021e <delay_us+0x22>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	2000016c 	.word	0x2000016c
 8000240:	20000168 	.word	0x20000168

08000244 <LCD_DATA>:

void LCD_DATA(uint8_t data) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af02      	add	r7, sp, #8
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=(data & 0xF0)|RS1_EN1|BackLight;
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	f023 030f 	bic.w	r3, r3, #15
 8000256:	b25b      	sxtb	r3, r3
 8000258:	f043 030d 	orr.w	r3, r3, #13
 800025c:	b25b      	sxtb	r3, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	73fb      	strb	r3, [r7, #15]

	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000262:	bf00      	nop
 8000264:	f107 020f 	add.w	r2, r7, #15
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	214e      	movs	r1, #78	@ 0x4e
 8000272:	482b      	ldr	r0, [pc, #172]	@ (8000320 <LCD_DATA+0xdc>)
 8000274:	f001 fb00 	bl	8001878 <HAL_I2C_Master_Transmit>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f2      	bne.n	8000264 <LCD_DATA+0x20>
	temp=(data & 0xF0)|RS1_EN0|BackLight;
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	f023 030f 	bic.w	r3, r3, #15
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f043 0309 	orr.w	r3, r3, #9
 800028c:	b25b      	sxtb	r3, r3
 800028e:	b2db      	uxtb	r3, r3
 8000290:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000292:	bf00      	nop
 8000294:	f107 020f 	add.w	r2, r7, #15
 8000298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	214e      	movs	r1, #78	@ 0x4e
 80002a2:	481f      	ldr	r0, [pc, #124]	@ (8000320 <LCD_DATA+0xdc>)
 80002a4:	f001 fae8 	bl	8001878 <HAL_I2C_Master_Transmit>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f2      	bne.n	8000294 <LCD_DATA+0x50>
	delay_us(4);
 80002ae:	2004      	movs	r0, #4
 80002b0:	f7ff ffa4 	bl	80001fc <delay_us>

	temp=((data << 4) & 0xF0)|RS1_EN1|BackLight;
 80002b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	f043 030d 	orr.w	r3, r3, #13
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80002c6:	bf00      	nop
 80002c8:	f107 020f 	add.w	r2, r7, #15
 80002cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2301      	movs	r3, #1
 80002d4:	214e      	movs	r1, #78	@ 0x4e
 80002d6:	4812      	ldr	r0, [pc, #72]	@ (8000320 <LCD_DATA+0xdc>)
 80002d8:	f001 face 	bl	8001878 <HAL_I2C_Master_Transmit>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d1f2      	bne.n	80002c8 <LCD_DATA+0x84>
	temp = ((data << 4) & 0xF0)|RS1_EN0|BackLight;
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	011b      	lsls	r3, r3, #4
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	f043 0309 	orr.w	r3, r3, #9
 80002ee:	b25b      	sxtb	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80002f4:	bf00      	nop
 80002f6:	f107 020f 	add.w	r2, r7, #15
 80002fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	214e      	movs	r1, #78	@ 0x4e
 8000304:	4806      	ldr	r0, [pc, #24]	@ (8000320 <LCD_DATA+0xdc>)
 8000306:	f001 fab7 	bl	8001878 <HAL_I2C_Master_Transmit>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1f2      	bne.n	80002f6 <LCD_DATA+0xb2>
	delay_us(50);
 8000310:	2032      	movs	r0, #50	@ 0x32
 8000312:	f7ff ff73 	bl	80001fc <delay_us>
}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000084 	.word	0x20000084

08000324 <LCD_CMD>:

void LCD_CMD(uint8_t cmd) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af02      	add	r7, sp, #8
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=(cmd & 0xF0)|RS0_EN1|BackLight;
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	f023 030f 	bic.w	r3, r3, #15
 8000336:	b25b      	sxtb	r3, r3
 8000338:	f043 030c 	orr.w	r3, r3, #12
 800033c:	b25b      	sxtb	r3, r3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000342:	bf00      	nop
 8000344:	f107 020f 	add.w	r2, r7, #15
 8000348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2301      	movs	r3, #1
 8000350:	214e      	movs	r1, #78	@ 0x4e
 8000352:	482b      	ldr	r0, [pc, #172]	@ (8000400 <LCD_CMD+0xdc>)
 8000354:	f001 fa90 	bl	8001878 <HAL_I2C_Master_Transmit>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f2      	bne.n	8000344 <LCD_CMD+0x20>
	temp=(cmd & 0xF0)|RS0_EN0|BackLight;
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	f023 030f 	bic.w	r3, r3, #15
 8000366:	b25b      	sxtb	r3, r3
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	b25b      	sxtb	r3, r3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000372:	bf00      	nop
 8000374:	f107 020f 	add.w	r2, r7, #15
 8000378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2301      	movs	r3, #1
 8000380:	214e      	movs	r1, #78	@ 0x4e
 8000382:	481f      	ldr	r0, [pc, #124]	@ (8000400 <LCD_CMD+0xdc>)
 8000384:	f001 fa78 	bl	8001878 <HAL_I2C_Master_Transmit>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f2      	bne.n	8000374 <LCD_CMD+0x50>
	delay_us(4);
 800038e:	2004      	movs	r0, #4
 8000390:	f7ff ff34 	bl	80001fc <delay_us>

	temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 8000394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	b25b      	sxtb	r3, r3
 800039c:	f043 030c 	orr.w	r3, r3, #12
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80003a6:	bf00      	nop
 80003a8:	f107 020f 	add.w	r2, r7, #15
 80003ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2301      	movs	r3, #1
 80003b4:	214e      	movs	r1, #78	@ 0x4e
 80003b6:	4812      	ldr	r0, [pc, #72]	@ (8000400 <LCD_CMD+0xdc>)
 80003b8:	f001 fa5e 	bl	8001878 <HAL_I2C_Master_Transmit>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1f2      	bne.n	80003a8 <LCD_CMD+0x84>
	temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80003d4:	bf00      	nop
 80003d6:	f107 020f 	add.w	r2, r7, #15
 80003da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2301      	movs	r3, #1
 80003e2:	214e      	movs	r1, #78	@ 0x4e
 80003e4:	4806      	ldr	r0, [pc, #24]	@ (8000400 <LCD_CMD+0xdc>)
 80003e6:	f001 fa47 	bl	8001878 <HAL_I2C_Master_Transmit>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f2      	bne.n	80003d6 <LCD_CMD+0xb2>
	delay_us(50);
 80003f0:	2032      	movs	r0, #50	@ 0x32
 80003f2:	f7ff ff03 	bl	80001fc <delay_us>
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000084 	.word	0x20000084

08000404 <LCD_CMD_4bit>:

void LCD_CMD_4bit(uint8_t cmd) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 800040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000412:	011b      	lsls	r3, r3, #4
 8000414:	b25b      	sxtb	r3, r3
 8000416:	f043 030c 	orr.w	r3, r3, #12
 800041a:	b25b      	sxtb	r3, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000420:	bf00      	nop
 8000422:	f107 020f 	add.w	r2, r7, #15
 8000426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2301      	movs	r3, #1
 800042e:	214e      	movs	r1, #78	@ 0x4e
 8000430:	4811      	ldr	r0, [pc, #68]	@ (8000478 <LCD_CMD_4bit+0x74>)
 8000432:	f001 fa21 	bl	8001878 <HAL_I2C_Master_Transmit>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f2      	bne.n	8000422 <LCD_CMD_4bit+0x1e>
	temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	011b      	lsls	r3, r3, #4
 8000442:	b25b      	sxtb	r3, r3
 8000444:	f043 0308 	orr.w	r3, r3, #8
 8000448:	b25b      	sxtb	r3, r3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 800044e:	bf00      	nop
 8000450:	f107 020f 	add.w	r2, r7, #15
 8000454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	214e      	movs	r1, #78	@ 0x4e
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <LCD_CMD_4bit+0x74>)
 8000460:	f001 fa0a 	bl	8001878 <HAL_I2C_Master_Transmit>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f2      	bne.n	8000450 <LCD_CMD_4bit+0x4c>
	delay_us(50);
 800046a:	2032      	movs	r0, #50	@ 0x32
 800046c:	f7ff fec6 	bl	80001fc <delay_us>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000084 	.word	0x20000084

0800047c <LCD_INIT>:

void LCD_INIT(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	delay_ms(100);
 8000480:	2064      	movs	r0, #100	@ 0x64
 8000482:	f000 fdad 	bl	8000fe0 <HAL_Delay>

	LCD_CMD_4bit(0x03); delay_ms(5);
 8000486:	2003      	movs	r0, #3
 8000488:	f7ff ffbc 	bl	8000404 <LCD_CMD_4bit>
 800048c:	2005      	movs	r0, #5
 800048e:	f000 fda7 	bl	8000fe0 <HAL_Delay>
	LCD_CMD_4bit(0x03); delay_us(100);
 8000492:	2003      	movs	r0, #3
 8000494:	f7ff ffb6 	bl	8000404 <LCD_CMD_4bit>
 8000498:	2064      	movs	r0, #100	@ 0x64
 800049a:	f7ff feaf 	bl	80001fc <delay_us>
	LCD_CMD_4bit(0x03); delay_us(100);
 800049e:	2003      	movs	r0, #3
 80004a0:	f7ff ffb0 	bl	8000404 <LCD_CMD_4bit>
 80004a4:	2064      	movs	r0, #100	@ 0x64
 80004a6:	f7ff fea9 	bl	80001fc <delay_us>
	LCD_CMD_4bit(0x02); delay_us(100);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ffaa 	bl	8000404 <LCD_CMD_4bit>
 80004b0:	2064      	movs	r0, #100	@ 0x64
 80004b2:	f7ff fea3 	bl	80001fc <delay_us>
	LCD_CMD(0x28);  // 4 bits, 2 line, 5x8 font
 80004b6:	2028      	movs	r0, #40	@ 0x28
 80004b8:	f7ff ff34 	bl	8000324 <LCD_CMD>
	LCD_CMD(0x08);  // display off, cursor off, blink off
 80004bc:	2008      	movs	r0, #8
 80004be:	f7ff ff31 	bl	8000324 <LCD_CMD>
	LCD_CMD(0x01);  // clear display
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ff2e 	bl	8000324 <LCD_CMD>
	delay_ms(3);
 80004c8:	2003      	movs	r0, #3
 80004ca:	f000 fd89 	bl	8000fe0 <HAL_Delay>
	LCD_CMD(0x06);  // cursor movint direction
 80004ce:	2006      	movs	r0, #6
 80004d0:	f7ff ff28 	bl	8000324 <LCD_CMD>
	LCD_CMD(0x0C);  // display on, cursor off, blink off
 80004d4:	200c      	movs	r0, #12
 80004d6:	f7ff ff25 	bl	8000324 <LCD_CMD>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}

080004de <LCD_XY>:

void LCD_XY(char x, char y) {
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	4603      	mov	r3, r0
 80004e6:	460a      	mov	r2, r1
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	4613      	mov	r3, r2
 80004ec:	71bb      	strb	r3, [r7, #6]
	if      (y == 0) LCD_CMD(0x80 + x);
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d106      	bne.n	8000502 <LCD_XY+0x24>
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3b80      	subs	r3, #128	@ 0x80
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff12 	bl	8000324 <LCD_CMD>
	else if (y == 1) LCD_CMD(0xC0 + x);
	else if (y == 2) LCD_CMD(0x94 + x);
	else if (y == 3) LCD_CMD(0xD4 + x);
}
 8000500:	e01c      	b.n	800053c <LCD_XY+0x5e>
	else if (y == 1) LCD_CMD(0xC0 + x);
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d106      	bne.n	8000516 <LCD_XY+0x38>
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	3b40      	subs	r3, #64	@ 0x40
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff08 	bl	8000324 <LCD_CMD>
}
 8000514:	e012      	b.n	800053c <LCD_XY+0x5e>
	else if (y == 2) LCD_CMD(0x94 + x);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d106      	bne.n	800052a <LCD_XY+0x4c>
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	3b6c      	subs	r3, #108	@ 0x6c
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fefe 	bl	8000324 <LCD_CMD>
}
 8000528:	e008      	b.n	800053c <LCD_XY+0x5e>
	else if (y == 3) LCD_CMD(0xD4 + x);
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d105      	bne.n	800053c <LCD_XY+0x5e>
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	3b2c      	subs	r3, #44	@ 0x2c
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fef4 	bl	8000324 <LCD_CMD>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <LCD_PUTS>:
void LCD_CLEAR(void) {
	LCD_CMD(0x01);
	delay_ms(2);
}

void LCD_PUTS(char *str) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	while (*str) LCD_DATA(*str++);
 800054c:	e006      	b.n	800055c <LCD_PUTS+0x18>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe74 	bl	8000244 <LCD_DATA>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f4      	bne.n	800054e <LCD_PUTS+0xa>
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <DHT11_SetPinOutput>:
void DHT11_SetPinOutput(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8000582:	2301      	movs	r3, #1
 8000584:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058e:	2303      	movs	r3, #3
 8000590:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <DHT11_SetPinOutput+0x34>)
 8000598:	f000 fe54 	bl	8001244 <HAL_GPIO_Init>
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010800 	.word	0x40010800

080005a8 <DHT11_SetPinInput>:

void DHT11_SetPinInput(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 80005ba:	2301      	movs	r3, #1
 80005bc:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <DHT11_SetPinInput+0x30>)
 80005cc:	f000 fe3a 	bl	8001244 <HAL_GPIO_Init>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40010800 	.word	0x40010800

080005dc <DHT11_SetPin>:

void DHT11_SetPin(GPIO_PinState state) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, state);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	461a      	mov	r2, r3
 80005ea:	2101      	movs	r1, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <DHT11_SetPin+0x20>)
 80005ee:	f000 ffc4 	bl	800157a <HAL_GPIO_WritePin>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010800 	.word	0x40010800

08000600 <DHT11_ReadPin>:

GPIO_PinState DHT11_ReadPin(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN);
 8000604:	2101      	movs	r1, #1
 8000606:	4803      	ldr	r0, [pc, #12]	@ (8000614 <DHT11_ReadPin+0x14>)
 8000608:	f000 ffa0 	bl	800154c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010800 	.word	0x40010800

08000618 <DHT11_DelayUs>:

void DHT11_DelayUs(uint32_t us) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <DHT11_DelayUs+0x2c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000628:	bf00      	nop
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <DHT11_DelayUs+0x2c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d8f9      	bhi.n	800062a <DHT11_DelayUs+0x12>
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200000d8 	.word	0x200000d8

08000648 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]

    // 출력 모드로 설정
    DHT11_SetPinOutput();
 8000652:	f7ff ff8d 	bl	8000570 <DHT11_SetPinOutput>

    // 시작 신호 전송 (18ms LOW)
    DHT11_SetPin(GPIO_PIN_RESET);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffc0 	bl	80005dc <DHT11_SetPin>
    HAL_Delay(20);  // 18ms -> 20ms로 변경 (더 안정적)
 800065c:	2014      	movs	r0, #20
 800065e:	f000 fcbf 	bl	8000fe0 <HAL_Delay>

    // HIGH로 변경 후 20-40us 대기
    DHT11_SetPin(GPIO_PIN_SET);
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff ffba 	bl	80005dc <DHT11_SetPin>
    DHT11_DelayUs(30);
 8000668:	201e      	movs	r0, #30
 800066a:	f7ff ffd5 	bl	8000618 <DHT11_DelayUs>

    // 입력 모드로 변경
    DHT11_SetPinInput();
 800066e:	f7ff ff9b 	bl	80005a8 <DHT11_SetPinInput>

    // DHT11 응답 확인 (80us LOW + 80us HIGH)
    DHT11_DelayUs(40);
 8000672:	2028      	movs	r0, #40	@ 0x28
 8000674:	f7ff ffd0 	bl	8000618 <DHT11_DelayUs>

    if (!(DHT11_ReadPin())) {
 8000678:	f7ff ffc2 	bl	8000600 <DHT11_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10c      	bne.n	800069c <DHT11_Start+0x54>
        DHT11_DelayUs(80);
 8000682:	2050      	movs	r0, #80	@ 0x50
 8000684:	f7ff ffc8 	bl	8000618 <DHT11_DelayUs>
        if (DHT11_ReadPin()) {
 8000688:	f7ff ffba 	bl	8000600 <DHT11_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <DHT11_Start+0x50>
            response = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <DHT11_Start+0x54>
        } else {
            response = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]
        }
    }

    // HIGH가 끝날 때까지 대기
    while (DHT11_ReadPin());
 800069c:	bf00      	nop
 800069e:	f7ff ffaf 	bl	8000600 <DHT11_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1fa      	bne.n	800069e <DHT11_Start+0x56>

    return response;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(void) {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
    // LOW 신호가 끝날 때까지 대기 (50us)
    while (!(DHT11_ReadPin()));
 80006b6:	bf00      	nop
 80006b8:	f7ff ffa2 	bl	8000600 <DHT11_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0fa      	beq.n	80006b8 <DHT11_ReadBit+0x6>

    // HIGH 신호 시작 후 30us 대기
    DHT11_DelayUs(30);
 80006c2:	201e      	movs	r0, #30
 80006c4:	f7ff ffa8 	bl	8000618 <DHT11_DelayUs>

    // 여전히 HIGH면 1, LOW면 0
    if (DHT11_ReadPin()) {
 80006c8:	f7ff ff9a 	bl	8000600 <DHT11_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d007      	beq.n	80006e2 <DHT11_ReadBit+0x30>
        // HIGH가 끝날 때까지 대기
        while (DHT11_ReadPin());
 80006d2:	bf00      	nop
 80006d4:	f7ff ff94 	bl	8000600 <DHT11_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1fa      	bne.n	80006d4 <DHT11_ReadBit+0x22>
        return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <DHT11_ReadBit+0x32>
    } else {
        return 0;
 80006e2:	2300      	movs	r3, #0
    }
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void) {
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	e00d      	b.n	8000714 <DHT11_ReadByte+0x2c>
        byte = (byte << 1) | DHT11_ReadBit();
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	b25c      	sxtb	r4, r3
 8000700:	f7ff ffd7 	bl	80006b2 <DHT11_ReadBit>
 8000704:	4603      	mov	r3, r0
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4323      	orrs	r3, r4
 800070a:	b25b      	sxtb	r3, r3
 800070c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2b07      	cmp	r3, #7
 8000718:	ddee      	ble.n	80006f8 <DHT11_ReadByte+0x10>
    }
    return byte;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11_Data *data) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    if (!DHT11_Start()) {
 800072c:	f7ff ff8c 	bl	8000648 <DHT11_Start>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <DHT11_ReadData+0x16>
        return 0; // 시작 신호 실패
 8000736:	2300      	movs	r3, #0
 8000738:	e033      	b.n	80007a2 <DHT11_ReadData+0x7e>
    }

    // 5바이트 데이터 읽기
    data->humidity = DHT11_ReadByte();
 800073a:	f7ff ffd5 	bl	80006e8 <DHT11_ReadByte>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	705a      	strb	r2, [r3, #1]
    data->hum_decimal = DHT11_ReadByte();
 8000746:	f7ff ffcf 	bl	80006e8 <DHT11_ReadByte>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	70da      	strb	r2, [r3, #3]
    data->temperature = DHT11_ReadByte();
 8000752:	f7ff ffc9 	bl	80006e8 <DHT11_ReadByte>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	701a      	strb	r2, [r3, #0]
    data->temp_decimal = DHT11_ReadByte();
 800075e:	f7ff ffc3 	bl	80006e8 <DHT11_ReadByte>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	709a      	strb	r2, [r3, #2]
    data->checksum = DHT11_ReadByte();
 800076a:	f7ff ffbd 	bl	80006e8 <DHT11_ReadByte>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	711a      	strb	r2, [r3, #4]

    // 체크섬 확인
    uint8_t calculated_checksum = data->humidity + data->hum_decimal +
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	785a      	ldrb	r2, [r3, #1]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	78db      	ldrb	r3, [r3, #3]
 800077e:	4413      	add	r3, r2
 8000780:	b2da      	uxtb	r2, r3
                                 data->temperature + data->temp_decimal;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
    uint8_t calculated_checksum = data->humidity + data->hum_decimal +
 8000786:	4413      	add	r3, r2
 8000788:	b2da      	uxtb	r2, r3
                                 data->temperature + data->temp_decimal;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	789b      	ldrb	r3, [r3, #2]
    uint8_t calculated_checksum = data->humidity + data->hum_decimal +
 800078e:	4413      	add	r3, r2
 8000790:	73fb      	strb	r3, [r7, #15]

    if (calculated_checksum == data->checksum) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	429a      	cmp	r2, r3
 800079a:	d101      	bne.n	80007a0 <DHT11_ReadData+0x7c>
        return 1; // 성공
 800079c:	2301      	movs	r3, #1
 800079e:	e000      	b.n	80007a2 <DHT11_ReadData+0x7e>
    } else {
        return 0; // 체크섬 오류
 80007a0:	2300      	movs	r3, #0
    }
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fbb4 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f87c 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f960 	bl	8000a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 f934 	bl	8000a28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007c0:	f000 f8b8 	bl	8000934 <MX_I2C1_Init>
  MX_TIM2_Init();
 80007c4:	f000 f8e4 	bl	8000990 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  I2C_ScanAddresses();
 80007c8:	f7ff fce6 	bl	8000198 <I2C_ScanAddresses>

  LCD_INIT();
 80007cc:	f7ff fe56 	bl	800047c <LCD_INIT>
  LCD_XY(0, 0) ; LCD_PUTS((char *)"LCD Display test");
 80007d0:	2100      	movs	r1, #0
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fe83 	bl	80004de <LCD_XY>
 80007d8:	482c      	ldr	r0, [pc, #176]	@ (800088c <main+0xe0>)
 80007da:	f7ff feb3 	bl	8000544 <LCD_PUTS>
  LCD_XY(0, 1) ; LCD_PUTS((char *)"Hello World.....");
 80007de:	2101      	movs	r1, #1
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fe7c 	bl	80004de <LCD_XY>
 80007e6:	482a      	ldr	r0, [pc, #168]	@ (8000890 <main+0xe4>)
 80007e8:	f7ff feac 	bl	8000544 <LCD_PUTS>

  HAL_TIM_Base_Start(&htim2);
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <main+0xe8>)
 80007ee:	f002 f929 	bl	8002a44 <HAL_TIM_Base_Start>

   // UART 초기화 메시지
   sprintf(uart_buffer, "DHT11 Temperature & Humidity Sensor Test\r\n");
 80007f2:	4929      	ldr	r1, [pc, #164]	@ (8000898 <main+0xec>)
 80007f4:	4829      	ldr	r0, [pc, #164]	@ (800089c <main+0xf0>)
 80007f6:	f002 feef 	bl	80035d8 <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80007fa:	4828      	ldr	r0, [pc, #160]	@ (800089c <main+0xf0>)
 80007fc:	f7ff fca6 	bl	800014c <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	4924      	ldr	r1, [pc, #144]	@ (800089c <main+0xf0>)
 800080a:	4825      	ldr	r0, [pc, #148]	@ (80008a0 <main+0xf4>)
 800080c:	f002 fbde 	bl	8002fcc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (DHT11_ReadData(&dht11_data)) {
 8000810:	4824      	ldr	r0, [pc, #144]	@ (80008a4 <main+0xf8>)
 8000812:	f7ff ff87 	bl	8000724 <DHT11_ReadData>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d014      	beq.n	8000846 <main+0x9a>
	  	      // 데이터 읽기 성공
	  	      sprintf(uart_buffer, "Temperature: %d°C, Humidity: %d%%\r\n",
	  	              dht11_data.temperature, dht11_data.humidity);
 800081c:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <main+0xf8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
	  	      sprintf(uart_buffer, "Temperature: %d°C, Humidity: %d%%\r\n",
 8000820:	461a      	mov	r2, r3
	  	              dht11_data.temperature, dht11_data.humidity);
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <main+0xf8>)
 8000824:	785b      	ldrb	r3, [r3, #1]
	  	      sprintf(uart_buffer, "Temperature: %d°C, Humidity: %d%%\r\n",
 8000826:	4920      	ldr	r1, [pc, #128]	@ (80008a8 <main+0xfc>)
 8000828:	481c      	ldr	r0, [pc, #112]	@ (800089c <main+0xf0>)
 800082a:	f002 fed5 	bl	80035d8 <siprintf>
	  	      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800082e:	481b      	ldr	r0, [pc, #108]	@ (800089c <main+0xf0>)
 8000830:	f7ff fc8c 	bl	800014c <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	b29a      	uxth	r2, r3
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	4917      	ldr	r1, [pc, #92]	@ (800089c <main+0xf0>)
 800083e:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <main+0xf4>)
 8000840:	f002 fbc4 	bl	8002fcc <HAL_UART_Transmit>
 8000844:	e00e      	b.n	8000864 <main+0xb8>
	  	    } else {
	  	      // 데이터 읽기 실패
	  	      sprintf(uart_buffer, "DHT11 Read Error!\r\n");
 8000846:	4919      	ldr	r1, [pc, #100]	@ (80008ac <main+0x100>)
 8000848:	4814      	ldr	r0, [pc, #80]	@ (800089c <main+0xf0>)
 800084a:	f002 fec5 	bl	80035d8 <siprintf>
	  	      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <main+0xf0>)
 8000850:	f7ff fc7c 	bl	800014c <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	490f      	ldr	r1, [pc, #60]	@ (800089c <main+0xf0>)
 800085e:	4810      	ldr	r0, [pc, #64]	@ (80008a0 <main+0xf4>)
 8000860:	f002 fbb4 	bl	8002fcc <HAL_UART_Transmit>
	  	    }

	  	    // 2초 대기 (DHT11은 최소 2초 간격으로 읽어야 함)
	  	    HAL_Delay(2000);
 8000864:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000868:	f000 fbba 	bl	8000fe0 <HAL_Delay>
	  	  LCD_XY(0, 0) ; LCD_PUTS((char *)"LCD Display test");
 800086c:	2100      	movs	r1, #0
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fe35 	bl	80004de <LCD_XY>
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <main+0xe0>)
 8000876:	f7ff fe65 	bl	8000544 <LCD_PUTS>

	  	  LCD_XY(0, 1) ; LCD_PUTS((char *)"Hello World.....");
 800087a:	2101      	movs	r1, #1
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fe2e 	bl	80004de <LCD_XY>
 8000882:	4803      	ldr	r0, [pc, #12]	@ (8000890 <main+0xe4>)
 8000884:	f7ff fe5e 	bl	8000544 <LCD_PUTS>
	  if (DHT11_ReadData(&dht11_data)) {
 8000888:	e7c2      	b.n	8000810 <main+0x64>
 800088a:	bf00      	nop
 800088c:	080046c0 	.word	0x080046c0
 8000890:	080046d4 	.word	0x080046d4
 8000894:	200000d8 	.word	0x200000d8
 8000898:	080046e8 	.word	0x080046e8
 800089c:	20000178 	.word	0x20000178
 80008a0:	20000120 	.word	0x20000120
 80008a4:	20000170 	.word	0x20000170
 80008a8:	08004714 	.word	0x08004714
 80008ac:	0800473c 	.word	0x0800473c

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	@ 0x40
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2228      	movs	r2, #40	@ 0x28
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 ff84 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008da:	2310      	movs	r3, #16
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008e6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fc47 	bl	8002184 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008fc:	f000 f92c 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 feb4 	bl	8002688 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000926:	f000 f917 	bl	8000b58 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	@ 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C1_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C1_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000972:	f000 fe3d 	bl	80015f0 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f8ec 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000084 	.word	0x20000084
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009d6:	f001 ffe5 	bl	80029a4 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009e0:	f000 f8ba 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_TIM2_Init+0x94>)
 80009f2:	f002 f871 	bl	8002ad8 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 f8ac 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_TIM2_Init+0x94>)
 8000a0e:	f002 fa2f 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f89e 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000d8 	.word	0x200000d8

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f002 fa64 	bl	8002f2c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f875 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000120 	.word	0x20000120
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a2c      	ldr	r2, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a26      	ldr	r2, [pc, #152]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0320 	and.w	r3, r3, #32
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_GPIO_Init+0xcc>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2120      	movs	r1, #32
 8000af4:	4815      	ldr	r0, [pc, #84]	@ (8000b4c <MX_GPIO_Init+0xd0>)
 8000af6:	f000 fd40 	bl	800157a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_GPIO_Init+0xd4>)
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_GPIO_Init+0xd8>)
 8000b10:	f000 fb98 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <MX_GPIO_Init+0xd0>)
 8000b2c:	f000 fb8a 	bl	8001244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2028      	movs	r0, #40	@ 0x28
 8000b36:	f000 fb4e 	bl	80011d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b3a:	2028      	movs	r0, #40	@ 0x28
 8000b3c:	f000 fb67 	bl	800120e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	10110000 	.word	0x10110000
 8000b54:	40011000 	.word	0x40011000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_MspInit+0x60>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <HAL_MspInit+0x60>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c58 <HAL_I2C_MspInit+0x90>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d132      	bne.n	8000c4e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c06:	2312      	movs	r3, #18
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <HAL_I2C_MspInit+0x98>)
 8000c16:	f000 fb15 	bl	8001244 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_I2C_MspInit+0x9c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <HAL_I2C_MspInit+0x9c>)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_I2C_MspInit+0x94>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	@ 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c78:	d10b      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_TIM_Base_MspInit+0x34>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_TIM_Base_MspInit+0x34>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_TIM_Base_MspInit+0x34>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <HAL_UART_MspInit+0x70>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d123      	bne.n	8000d08 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cca:	61d3      	str	r3, [r2, #28]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_UART_MspInit+0x74>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x78>)
 8000d04:	f000 fa9e 	bl	8001244 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f91c 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d7c:	f000 fc16 	bl	80015ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e009      	b.n	8000de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff f9bf 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf1      	blt.n	8000dd0 <_write+0x12>
  }
  return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_close>:

int _close(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b085      	sub	sp, #20
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f002 fcee 	bl	8003868 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20005000 	.word	0x20005000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	200001dc 	.word	0x200001dc
 8000ec0:	20000330 	.word	0x20000330

08000ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff fff8 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ed6:	490c      	ldr	r1, [pc, #48]	@ (8000f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eec:	4c09      	ldr	r4, [pc, #36]	@ (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f002 fcbb 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fc55 	bl	80007ac <main>
  bx lr
 8000f02:	4770      	bx	lr
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f0c:	080047c0 	.word	0x080047c0
  ldr r2, =_sbss
 8000f10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f14:	20000330 	.word	0x20000330

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f947 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe14 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f95f 	bl	800122a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f927 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a03      	ldr	r2, [pc, #12]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200001e0 	.word	0x200001e0

08000fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	@ (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	200001e0 	.word	0x200001e0

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffe0 	bl	8000fcc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	@ (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff90 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff2d 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff42 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff35 	bl	800108c <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	@ 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e169      	b.n	800152c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8158 	bne.w	8001526 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a9a      	ldr	r2, [pc, #616]	@ (80014e4 <HAL_GPIO_Init+0x2a0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001280:	4a98      	ldr	r2, [pc, #608]	@ (80014e4 <HAL_GPIO_Init+0x2a0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d875      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001286:	4a98      	ldr	r2, [pc, #608]	@ (80014e8 <HAL_GPIO_Init+0x2a4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d058      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 800128c:	4a96      	ldr	r2, [pc, #600]	@ (80014e8 <HAL_GPIO_Init+0x2a4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d86f      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001292:	4a96      	ldr	r2, [pc, #600]	@ (80014ec <HAL_GPIO_Init+0x2a8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d052      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001298:	4a94      	ldr	r2, [pc, #592]	@ (80014ec <HAL_GPIO_Init+0x2a8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d869      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 800129e:	4a94      	ldr	r2, [pc, #592]	@ (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04c      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012a4:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d863      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012aa:	4a92      	ldr	r2, [pc, #584]	@ (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d046      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012b0:	4a90      	ldr	r2, [pc, #576]	@ (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d85d      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d82a      	bhi.n	8001310 <HAL_GPIO_Init+0xcc>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d859      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012be:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <HAL_GPIO_Init+0x80>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	08001319 	.word	0x08001319
 80012cc:	0800132b 	.word	0x0800132b
 80012d0:	0800136d 	.word	0x0800136d
 80012d4:	08001373 	.word	0x08001373
 80012d8:	08001373 	.word	0x08001373
 80012dc:	08001373 	.word	0x08001373
 80012e0:	08001373 	.word	0x08001373
 80012e4:	08001373 	.word	0x08001373
 80012e8:	08001373 	.word	0x08001373
 80012ec:	08001373 	.word	0x08001373
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001373 	.word	0x08001373
 80012fc:	08001373 	.word	0x08001373
 8001300:	08001373 	.word	0x08001373
 8001304:	08001373 	.word	0x08001373
 8001308:	08001321 	.word	0x08001321
 800130c:	08001335 	.word	0x08001335
 8001310:	4a79      	ldr	r2, [pc, #484]	@ (80014f8 <HAL_GPIO_Init+0x2b4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e02c      	b.n	8001372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e029      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e024      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3308      	adds	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e01f      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	330c      	adds	r3, #12
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e01a      	b.n	8001374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	2304      	movs	r3, #4
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e013      	b.n	8001374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	611a      	str	r2, [r3, #16]
          break;
 800135e:	e009      	b.n	8001374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	615a      	str	r2, [r3, #20]
          break;
 800136a:	e003      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x130>
          break;
 8001372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d801      	bhi.n	800137e <HAL_GPIO_Init+0x13a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_Init+0x13e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	@ 0xff
 8001388:	d802      	bhi.n	8001390 <HAL_GPIO_Init+0x14c>
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x152>
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	3b08      	subs	r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80b1 	beq.w	8001526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c4:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013dc:	4a48      	ldr	r2, [pc, #288]	@ (8001500 <HAL_GPIO_Init+0x2bc>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a40      	ldr	r2, [pc, #256]	@ (8001504 <HAL_GPIO_Init+0x2c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x1ec>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3f      	ldr	r2, [pc, #252]	@ (8001508 <HAL_GPIO_Init+0x2c4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1e8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3e      	ldr	r2, [pc, #248]	@ (800150c <HAL_GPIO_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1e4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001420:	2303      	movs	r3, #3
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001424:	2304      	movs	r3, #4
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001428:	2302      	movs	r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	492f      	ldr	r1, [pc, #188]	@ (8001500 <HAL_GPIO_Init+0x2bc>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	492c      	ldr	r1, [pc, #176]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4928      	ldr	r1, [pc, #160]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4922      	ldr	r1, [pc, #136]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	491e      	ldr	r1, [pc, #120]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4918      	ldr	r1, [pc, #96]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4914      	ldr	r1, [pc, #80]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d021      	beq.n	8001518 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	490e      	ldr	r1, [pc, #56]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e021      	b.n	8001526 <HAL_GPIO_Init+0x2e2>
 80014e2:	bf00      	nop
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10220000 	.word	0x10220000
 80014f0:	10210000 	.word	0x10210000
 80014f4:	10120000 	.word	0x10120000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_GPIO_Init+0x304>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <HAL_GPIO_Init+0x304>)
 8001522:	4013      	ands	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f ae8e 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	372c      	adds	r7, #44	@ 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800158a:	787b      	ldrb	r3, [r7, #1]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001590:	887a      	ldrh	r2, [r7, #2]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f806 	bl	80015dc <HAL_GPIO_EXTI_Callback>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010400 	.word	0x40010400

080015dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12b      	b.n	800185a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fad6 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f001 f960 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a81      	ldr	r2, [pc, #516]	@ (8001864 <HAL_I2C_Init+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a80      	ldr	r2, [pc, #512]	@ (8001868 <HAL_I2C_Init+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a7d      	ldr	r2, [pc, #500]	@ (800186c <HAL_I2C_Init+0x27c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a78      	ldr	r2, [pc, #480]	@ (8001870 <HAL_I2C_Init+0x280>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <HAL_I2C_Init+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a69      	ldr	r2, [pc, #420]	@ (8001874 <HAL_I2C_Init+0x284>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	495c      	ldr	r1, [pc, #368]	@ (8001864 <HAL_I2C_Init+0x274>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d819      	bhi.n	800172c <HAL_I2C_Init+0x13c>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800170c:	400b      	ands	r3, r1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_Init+0x138>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	e051      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x168>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x18e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x196>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	817b      	strh	r3, [r7, #10]
 8001888:	4613      	mov	r3, r2
 800188a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff fb9e 	bl	8000fcc <HAL_GetTick>
 8001890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	f040 80e0 	bne.w	8001a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	4970      	ldr	r1, [pc, #448]	@ (8001a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fa92 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0d3      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2C_Master_Transmit+0x50>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0cc      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2221      	movs	r2, #33	@ 0x21
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2210      	movs	r2, #16
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	6a3a      	ldr	r2, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f9ca 	bl	8001cd0 <I2C_MasterRequestWrite>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e08d      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800195c:	e066      	b.n	8001a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fb50 	bl	8002008 <I2C_WaitOnTXEFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	2b04      	cmp	r3, #4
 8001974:	d107      	bne.n	8001986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06b      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d11b      	bne.n	8001a00 <HAL_I2C_Master_Transmit+0x188>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	6a39      	ldr	r1, [r7, #32]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fb47 	bl	8002098 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e01a      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d194      	bne.n	800195e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e000      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a60:	2302      	movs	r3, #2
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	00100002 	.word	0x00100002
 8001a70:	ffff0000 	.word	0xffff0000

08001a74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff faa2 	bl	8000fcc <HAL_GetTick>
 8001a88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	f040 8111 	bne.w	8001cbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2319      	movs	r3, #25
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4988      	ldr	r1, [pc, #544]	@ (8001cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f994 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e104      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2C_IsDeviceReady+0x50>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e0fd      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d007      	beq.n	8001aea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2224      	movs	r2, #36	@ 0x24
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a70      	ldr	r2, [pc, #448]	@ (8001ccc <HAL_I2C_IsDeviceReady+0x258>)
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f952 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00d      	beq.n	8001b52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b44:	d103      	bne.n	8001b4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0b6      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa33 	bl	8000fcc <HAL_GetTick>
 8001b66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b96:	e025      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff fa18 	bl	8000fcc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <HAL_I2C_IsDeviceReady+0x13a>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	22a0      	movs	r2, #160	@ 0xa0
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bee:	d005      	beq.n	8001bfc <HAL_I2C_IsDeviceReady+0x188>
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_I2C_IsDeviceReady+0x188>
 8001bf6:	7dbb      	ldrb	r3, [r7, #22]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0cd      	beq.n	8001b98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d129      	bne.n	8001c66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4921      	ldr	r1, [pc, #132]	@ (8001cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8c6 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e036      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e02c      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2319      	movs	r3, #25
 8001c86:	2201      	movs	r2, #1
 8001c88:	490f      	ldr	r1, [pc, #60]	@ (8001cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f8a2 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e012      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f4ff af32 	bcc.w	8001b0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000

08001cd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d006      	beq.n	8001cfa <I2C_MasterRequestWrite+0x2a>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d003      	beq.n	8001cfa <I2C_MasterRequestWrite+0x2a>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cf8:	d108      	bne.n	8001d0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e00b      	b.n	8001d24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d107      	bne.n	8001d24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f84f 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d4a:	d103      	bne.n	8001d54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e035      	b.n	8001dc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d60:	d108      	bne.n	8001d74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	e01b      	b.n	8001dac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	11db      	asrs	r3, r3, #7
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f003 0306 	and.w	r3, r3, #6
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f063 030f 	orn	r3, r3, #15
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	490e      	ldr	r1, [pc, #56]	@ (8001dcc <I2C_MasterRequestWrite+0xfc>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f898 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e010      	b.n	8001dc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4907      	ldr	r1, [pc, #28]	@ (8001dd0 <I2C_MasterRequestWrite+0x100>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f888 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00010008 	.word	0x00010008
 8001dd0:	00010002 	.word	0x00010002

08001dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de4:	e048      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d044      	beq.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7ff f8ed 	bl	8000fcc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d139      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	e00c      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d116      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e023      	b.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10d      	bne.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	e00c      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d093      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ed6:	e071      	b.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d123      	bne.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e067      	b.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d041      	beq.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f38:	f7ff f848 	bl	8000fcc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d302      	bcc.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d136      	bne.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e00b      	b.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e021      	b.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10c      	bne.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e00b      	b.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f af6d 	bne.w	8001ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002014:	e034      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f886 	bl	8002128 <I2C_IsAcknowledgeFailed>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e034      	b.n	8002090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d028      	beq.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7fe ffcd 	bl	8000fcc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11d      	bne.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d016      	beq.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e007      	b.n	8002090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d1c3      	bne.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a4:	e034      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f83e 	bl	8002128 <I2C_IsAcknowledgeFailed>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d028      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7fe ff85 	bl	8000fcc <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11d      	bne.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d016      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d1c3      	bne.n	80020a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d11b      	bne.n	8002178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e272      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e24c      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe feb4 	bl	8000fcc <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe feb0 	bl	8000fcc <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e200      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fea0 	bl	8000fcc <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fe9c 	bl	8000fcc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1ec      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1c0      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	@ (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fe55 	bl	8000fcc <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fe51 	bl	8000fcc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1a1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	@ (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fe34 	bl	8000fcc <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fe30 	bl	8000fcc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e180      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fe14 	bl	8000fcc <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fe10 	bl	8000fcc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e160      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 face 	bl	8002968 <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fdfa 	bl	8000fcc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fdf6 	bl	8000fcc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e146      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b92      	ldr	r3, [pc, #584]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b8b      	ldr	r3, [pc, #556]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b88      	ldr	r3, [pc, #544]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a87      	ldr	r2, [pc, #540]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b85      	ldr	r3, [pc, #532]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b82      	ldr	r3, [pc, #520]	@ (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b7f      	ldr	r3, [pc, #508]	@ (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	@ (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe fdb7 	bl	8000fcc <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fdb3 	bl	8000fcc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	@ 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e103      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b75      	ldr	r3, [pc, #468]	@ (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a6e      	ldr	r2, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b6a      	ldr	r3, [pc, #424]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a69      	ldr	r2, [pc, #420]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b67      	ldr	r3, [pc, #412]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a60      	ldr	r2, [pc, #384]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a5a      	ldr	r2, [pc, #360]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a57      	ldr	r2, [pc, #348]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fd67 	bl	8000fcc <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fd63 	bl	8000fcc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0b1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b4b      	ldr	r3, [pc, #300]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe fd51 	bl	8000fcc <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fd4d 	bl	8000fcc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e09b      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b40      	ldr	r3, [pc, #256]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b3c      	ldr	r3, [pc, #240]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a3b      	ldr	r2, [pc, #236]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b36      	ldr	r3, [pc, #216]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b33      	ldr	r3, [pc, #204]	@ (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fd21 	bl	8000fcc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fd1d 	bl	8000fcc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e06d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4921      	ldr	r1, [pc, #132]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	491b      	ldr	r1, [pc, #108]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fcf1 	bl	8000fcc <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fced 	bl	8000fcc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e035      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fcda 	bl	8000fcc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fcd6 	bl	8000fcc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e026      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e01e      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e019      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_OscConfig+0x500>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe fc28 	bl	8000fcc <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fc24 	bl	8000fcc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	@ (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fb86 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08004750 	.word	0x08004750
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x30>
 8002886:	2b08      	cmp	r3, #8
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x36>
 800288a:	e027      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800288e:	613b      	str	r3, [r7, #16]
      break;
 8002890:	e027      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0c5b      	lsrs	r3, r3, #17
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	4a11      	ldr	r2, [pc, #68]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	fb03 f202 	mul.w	r2, r3, r2
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e004      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	613b      	str	r3, [r7, #16]
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	693b      	ldr	r3, [r7, #16]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	08004768 	.word	0x08004768
 80028fc:	08004778 	.word	0x08004778
 8002900:	003d0900 	.word	0x003d0900

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <HAL_RCC_GetHCLKFreq+0x10>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	@ (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08004760 	.word	0x08004760

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffde 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	@ (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08004760 	.word	0x08004760

08002968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <RCC_Delay+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <RCC_Delay+0x38>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002984:	bf00      	nop
  }
  while (Delay --);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <RCC_Delay+0x1c>
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000000 	.word	0x20000000
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f94c 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 f940 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_TIM_Base_Start+0x88>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00e      	beq.n	8002a8c <HAL_TIM_Base_Start+0x48>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d009      	beq.n	8002a8c <HAL_TIM_Base_Start+0x48>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ad0 <HAL_TIM_Base_Start+0x8c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIM_Base_Start+0x48>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <HAL_TIM_Base_Start+0x90>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d010      	beq.n	8002ac0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aae:	e007      	b.n	8002ac0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_ConfigClockSource+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0b4      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x186>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b2c:	d03e      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0xd4>
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b32:	f200 8087 	bhi.w	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_TIM_ConfigClockSource+0x172>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b42:	d87f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b70      	cmp	r3, #112	@ 0x70
 8002b46:	d01a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xa6>
 8002b48:	2b70      	cmp	r3, #112	@ 0x70
 8002b4a:	d87b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b60      	cmp	r3, #96	@ 0x60
 8002b4e:	d050      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b50:	2b60      	cmp	r3, #96	@ 0x60
 8002b52:	d877      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b50      	cmp	r3, #80	@ 0x50
 8002b56:	d03c      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b58:	2b50      	cmp	r3, #80	@ 0x50
 8002b5a:	d873      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d058      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x13a>
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d86f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b30      	cmp	r3, #48	@ 0x30
 8002b66:	d064      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b68:	2b30      	cmp	r3, #48	@ 0x30
 8002b6a:	d86b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d060      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d867      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d05a      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7c:	e062      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	f000 f950 	bl	8002e32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	609a      	str	r2, [r3, #8]
      break;
 8002baa:	e04f      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	f000 f939 	bl	8002e32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bce:	609a      	str	r2, [r3, #8]
      break;
 8002bd0:	e03c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f8b0 	bl	8002d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2150      	movs	r1, #80	@ 0x50
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f907 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e02c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8ce 	bl	8002da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2160      	movs	r1, #96	@ 0x60
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8f7 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c10:	e01c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f890 	bl	8002d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2140      	movs	r1, #64	@ 0x40
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f8e7 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c30:	e00c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f000 f8de 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c42:	e003      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <TIM_Base_SetConfig+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a2b      	ldr	r2, [pc, #172]	@ (8002d40 <TIM_Base_SetConfig+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb8:	d007      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d3c <TIM_Base_SetConfig+0xd4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d40 <TIM_Base_SetConfig+0xd8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f023 0201 	bic.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	611a      	str	r2, [r3, #16]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 030a 	bic.w	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	621a      	str	r2, [r3, #32]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f043 0307 	orr.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e046      	b.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d009      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a12      	ldr	r2, [pc, #72]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800

08002f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e042      	b.n	8002fc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fea4 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f971 	bl	8003258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d175      	bne.n	80030d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Transmit+0x2c>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e06e      	b.n	80030da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fd ffdf 	bl	8000fcc <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003024:	d108      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e003      	b.n	8003040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003040:	e02e      	b.n	80030a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f848 	bl	80030e2 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e03a      	b.n	80030da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1cb      	bne.n	8003042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	@ 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f814 	bl	80030e2 <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f2:	e03b      	b.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d037      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7fd ff66 	bl	8000fcc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <UART_WaitOnFlagUntilTimeout+0x30>
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e03a      	b.n	800318c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b80      	cmp	r3, #128	@ 0x80
 8003128:	d020      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d01d      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	d116      	bne.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f81d 	bl	8003194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2208      	movs	r2, #8
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e00f      	b.n	800318c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d0b4      	beq.n	80030f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b095      	sub	sp, #84	@ 0x54
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	2b01      	cmp	r3, #1
 800320a:	d119      	bne.n	8003240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	60bb      	str	r3, [r7, #8]
   return(result);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0310 	bic.w	r3, r3, #16
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800322c:	61ba      	str	r2, [r7, #24]
 800322e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	613b      	str	r3, [r7, #16]
   return(result);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800324e:	bf00      	nop
 8003250:	3754      	adds	r7, #84	@ 0x54
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003292:	f023 030c 	bic.w	r3, r3, #12
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	430b      	orrs	r3, r1
 800329e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2c      	ldr	r2, [pc, #176]	@ (800336c <UART_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff fb3e 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	e002      	b.n	80032ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7ff fb26 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	0119      	lsls	r1, r3, #4
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	@ 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	@ 0x32
 8003318:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003324:	4419      	add	r1, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	@ 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	@ 0x32
 8003350:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	440a      	add	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013800 	.word	0x40013800
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <std>:
 8003374:	2300      	movs	r3, #0
 8003376:	b510      	push	{r4, lr}
 8003378:	4604      	mov	r4, r0
 800337a:	e9c0 3300 	strd	r3, r3, [r0]
 800337e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003382:	6083      	str	r3, [r0, #8]
 8003384:	8181      	strh	r1, [r0, #12]
 8003386:	6643      	str	r3, [r0, #100]	@ 0x64
 8003388:	81c2      	strh	r2, [r0, #14]
 800338a:	6183      	str	r3, [r0, #24]
 800338c:	4619      	mov	r1, r3
 800338e:	2208      	movs	r2, #8
 8003390:	305c      	adds	r0, #92	@ 0x5c
 8003392:	f000 fa1b 	bl	80037cc <memset>
 8003396:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <std+0x58>)
 8003398:	6224      	str	r4, [r4, #32]
 800339a:	6263      	str	r3, [r4, #36]	@ 0x24
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <std+0x5c>)
 800339e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <std+0x60>)
 80033a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <std+0x64>)
 80033a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <std+0x68>)
 80033aa:	429c      	cmp	r4, r3
 80033ac:	d006      	beq.n	80033bc <std+0x48>
 80033ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033b2:	4294      	cmp	r4, r2
 80033b4:	d002      	beq.n	80033bc <std+0x48>
 80033b6:	33d0      	adds	r3, #208	@ 0xd0
 80033b8:	429c      	cmp	r4, r3
 80033ba:	d105      	bne.n	80033c8 <std+0x54>
 80033bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c4:	f000 ba7a 	b.w	80038bc <__retarget_lock_init_recursive>
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	0800361d 	.word	0x0800361d
 80033d0:	0800363f 	.word	0x0800363f
 80033d4:	08003677 	.word	0x08003677
 80033d8:	0800369b 	.word	0x0800369b
 80033dc:	200001e4 	.word	0x200001e4

080033e0 <stdio_exit_handler>:
 80033e0:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <stdio_exit_handler+0xc>)
 80033e2:	4903      	ldr	r1, [pc, #12]	@ (80033f0 <stdio_exit_handler+0x10>)
 80033e4:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <stdio_exit_handler+0x14>)
 80033e6:	f000 b869 	b.w	80034bc <_fwalk_sglue>
 80033ea:	bf00      	nop
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	08004401 	.word	0x08004401
 80033f4:	2000001c 	.word	0x2000001c

080033f8 <cleanup_stdio>:
 80033f8:	6841      	ldr	r1, [r0, #4]
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <cleanup_stdio+0x34>)
 80033fc:	b510      	push	{r4, lr}
 80033fe:	4299      	cmp	r1, r3
 8003400:	4604      	mov	r4, r0
 8003402:	d001      	beq.n	8003408 <cleanup_stdio+0x10>
 8003404:	f000 fffc 	bl	8004400 <_fflush_r>
 8003408:	68a1      	ldr	r1, [r4, #8]
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <cleanup_stdio+0x38>)
 800340c:	4299      	cmp	r1, r3
 800340e:	d002      	beq.n	8003416 <cleanup_stdio+0x1e>
 8003410:	4620      	mov	r0, r4
 8003412:	f000 fff5 	bl	8004400 <_fflush_r>
 8003416:	68e1      	ldr	r1, [r4, #12]
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <cleanup_stdio+0x3c>)
 800341a:	4299      	cmp	r1, r3
 800341c:	d004      	beq.n	8003428 <cleanup_stdio+0x30>
 800341e:	4620      	mov	r0, r4
 8003420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003424:	f000 bfec 	b.w	8004400 <_fflush_r>
 8003428:	bd10      	pop	{r4, pc}
 800342a:	bf00      	nop
 800342c:	200001e4 	.word	0x200001e4
 8003430:	2000024c 	.word	0x2000024c
 8003434:	200002b4 	.word	0x200002b4

08003438 <global_stdio_init.part.0>:
 8003438:	b510      	push	{r4, lr}
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <global_stdio_init.part.0+0x30>)
 800343c:	4c0b      	ldr	r4, [pc, #44]	@ (800346c <global_stdio_init.part.0+0x34>)
 800343e:	4a0c      	ldr	r2, [pc, #48]	@ (8003470 <global_stdio_init.part.0+0x38>)
 8003440:	4620      	mov	r0, r4
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	2104      	movs	r1, #4
 8003446:	2200      	movs	r2, #0
 8003448:	f7ff ff94 	bl	8003374 <std>
 800344c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003450:	2201      	movs	r2, #1
 8003452:	2109      	movs	r1, #9
 8003454:	f7ff ff8e 	bl	8003374 <std>
 8003458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800345c:	2202      	movs	r2, #2
 800345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003462:	2112      	movs	r1, #18
 8003464:	f7ff bf86 	b.w	8003374 <std>
 8003468:	2000031c 	.word	0x2000031c
 800346c:	200001e4 	.word	0x200001e4
 8003470:	080033e1 	.word	0x080033e1

08003474 <__sfp_lock_acquire>:
 8003474:	4801      	ldr	r0, [pc, #4]	@ (800347c <__sfp_lock_acquire+0x8>)
 8003476:	f000 ba22 	b.w	80038be <__retarget_lock_acquire_recursive>
 800347a:	bf00      	nop
 800347c:	20000325 	.word	0x20000325

08003480 <__sfp_lock_release>:
 8003480:	4801      	ldr	r0, [pc, #4]	@ (8003488 <__sfp_lock_release+0x8>)
 8003482:	f000 ba1d 	b.w	80038c0 <__retarget_lock_release_recursive>
 8003486:	bf00      	nop
 8003488:	20000325 	.word	0x20000325

0800348c <__sinit>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	f7ff fff0 	bl	8003474 <__sfp_lock_acquire>
 8003494:	6a23      	ldr	r3, [r4, #32]
 8003496:	b11b      	cbz	r3, 80034a0 <__sinit+0x14>
 8003498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349c:	f7ff bff0 	b.w	8003480 <__sfp_lock_release>
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__sinit+0x28>)
 80034a2:	6223      	str	r3, [r4, #32]
 80034a4:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <__sinit+0x2c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f5      	bne.n	8003498 <__sinit+0xc>
 80034ac:	f7ff ffc4 	bl	8003438 <global_stdio_init.part.0>
 80034b0:	e7f2      	b.n	8003498 <__sinit+0xc>
 80034b2:	bf00      	nop
 80034b4:	080033f9 	.word	0x080033f9
 80034b8:	2000031c 	.word	0x2000031c

080034bc <_fwalk_sglue>:
 80034bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c0:	4607      	mov	r7, r0
 80034c2:	4688      	mov	r8, r1
 80034c4:	4614      	mov	r4, r2
 80034c6:	2600      	movs	r6, #0
 80034c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034cc:	f1b9 0901 	subs.w	r9, r9, #1
 80034d0:	d505      	bpl.n	80034de <_fwalk_sglue+0x22>
 80034d2:	6824      	ldr	r4, [r4, #0]
 80034d4:	2c00      	cmp	r4, #0
 80034d6:	d1f7      	bne.n	80034c8 <_fwalk_sglue+0xc>
 80034d8:	4630      	mov	r0, r6
 80034da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034de:	89ab      	ldrh	r3, [r5, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d907      	bls.n	80034f4 <_fwalk_sglue+0x38>
 80034e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e8:	3301      	adds	r3, #1
 80034ea:	d003      	beq.n	80034f4 <_fwalk_sglue+0x38>
 80034ec:	4629      	mov	r1, r5
 80034ee:	4638      	mov	r0, r7
 80034f0:	47c0      	blx	r8
 80034f2:	4306      	orrs	r6, r0
 80034f4:	3568      	adds	r5, #104	@ 0x68
 80034f6:	e7e9      	b.n	80034cc <_fwalk_sglue+0x10>

080034f8 <iprintf>:
 80034f8:	b40f      	push	{r0, r1, r2, r3}
 80034fa:	b507      	push	{r0, r1, r2, lr}
 80034fc:	4906      	ldr	r1, [pc, #24]	@ (8003518 <iprintf+0x20>)
 80034fe:	ab04      	add	r3, sp, #16
 8003500:	6808      	ldr	r0, [r1, #0]
 8003502:	f853 2b04 	ldr.w	r2, [r3], #4
 8003506:	6881      	ldr	r1, [r0, #8]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	f000 fc51 	bl	8003db0 <_vfiprintf_r>
 800350e:	b003      	add	sp, #12
 8003510:	f85d eb04 	ldr.w	lr, [sp], #4
 8003514:	b004      	add	sp, #16
 8003516:	4770      	bx	lr
 8003518:	20000018 	.word	0x20000018

0800351c <_puts_r>:
 800351c:	6a03      	ldr	r3, [r0, #32]
 800351e:	b570      	push	{r4, r5, r6, lr}
 8003520:	4605      	mov	r5, r0
 8003522:	460e      	mov	r6, r1
 8003524:	6884      	ldr	r4, [r0, #8]
 8003526:	b90b      	cbnz	r3, 800352c <_puts_r+0x10>
 8003528:	f7ff ffb0 	bl	800348c <__sinit>
 800352c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800352e:	07db      	lsls	r3, r3, #31
 8003530:	d405      	bmi.n	800353e <_puts_r+0x22>
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	0598      	lsls	r0, r3, #22
 8003536:	d402      	bmi.n	800353e <_puts_r+0x22>
 8003538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800353a:	f000 f9c0 	bl	80038be <__retarget_lock_acquire_recursive>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	0719      	lsls	r1, r3, #28
 8003542:	d502      	bpl.n	800354a <_puts_r+0x2e>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d135      	bne.n	80035b6 <_puts_r+0x9a>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f8e7 	bl	8003720 <__swsetup_r>
 8003552:	b380      	cbz	r0, 80035b6 <_puts_r+0x9a>
 8003554:	f04f 35ff 	mov.w	r5, #4294967295
 8003558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800355a:	07da      	lsls	r2, r3, #31
 800355c:	d405      	bmi.n	800356a <_puts_r+0x4e>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	059b      	lsls	r3, r3, #22
 8003562:	d402      	bmi.n	800356a <_puts_r+0x4e>
 8003564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003566:	f000 f9ab 	bl	80038c0 <__retarget_lock_release_recursive>
 800356a:	4628      	mov	r0, r5
 800356c:	bd70      	pop	{r4, r5, r6, pc}
 800356e:	2b00      	cmp	r3, #0
 8003570:	da04      	bge.n	800357c <_puts_r+0x60>
 8003572:	69a2      	ldr	r2, [r4, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	dc17      	bgt.n	80035a8 <_puts_r+0x8c>
 8003578:	290a      	cmp	r1, #10
 800357a:	d015      	beq.n	80035a8 <_puts_r+0x8c>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	6022      	str	r2, [r4, #0]
 8003582:	7019      	strb	r1, [r3, #0]
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800358a:	3b01      	subs	r3, #1
 800358c:	60a3      	str	r3, [r4, #8]
 800358e:	2900      	cmp	r1, #0
 8003590:	d1ed      	bne.n	800356e <_puts_r+0x52>
 8003592:	2b00      	cmp	r3, #0
 8003594:	da11      	bge.n	80035ba <_puts_r+0x9e>
 8003596:	4622      	mov	r2, r4
 8003598:	210a      	movs	r1, #10
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f881 	bl	80036a2 <__swbuf_r>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d0d7      	beq.n	8003554 <_puts_r+0x38>
 80035a4:	250a      	movs	r5, #10
 80035a6:	e7d7      	b.n	8003558 <_puts_r+0x3c>
 80035a8:	4622      	mov	r2, r4
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 f879 	bl	80036a2 <__swbuf_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1e7      	bne.n	8003584 <_puts_r+0x68>
 80035b4:	e7ce      	b.n	8003554 <_puts_r+0x38>
 80035b6:	3e01      	subs	r6, #1
 80035b8:	e7e4      	b.n	8003584 <_puts_r+0x68>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	220a      	movs	r2, #10
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e7ee      	b.n	80035a4 <_puts_r+0x88>
	...

080035c8 <puts>:
 80035c8:	4b02      	ldr	r3, [pc, #8]	@ (80035d4 <puts+0xc>)
 80035ca:	4601      	mov	r1, r0
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f7ff bfa5 	b.w	800351c <_puts_r>
 80035d2:	bf00      	nop
 80035d4:	20000018 	.word	0x20000018

080035d8 <siprintf>:
 80035d8:	b40e      	push	{r1, r2, r3}
 80035da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035de:	b510      	push	{r4, lr}
 80035e0:	2400      	movs	r4, #0
 80035e2:	b09d      	sub	sp, #116	@ 0x74
 80035e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035e6:	9002      	str	r0, [sp, #8]
 80035e8:	9006      	str	r0, [sp, #24]
 80035ea:	9107      	str	r1, [sp, #28]
 80035ec:	9104      	str	r1, [sp, #16]
 80035ee:	4809      	ldr	r0, [pc, #36]	@ (8003614 <siprintf+0x3c>)
 80035f0:	4909      	ldr	r1, [pc, #36]	@ (8003618 <siprintf+0x40>)
 80035f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80035f6:	9105      	str	r1, [sp, #20]
 80035f8:	6800      	ldr	r0, [r0, #0]
 80035fa:	a902      	add	r1, sp, #8
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003600:	f000 fab2 	bl	8003b68 <_svfiprintf_r>
 8003604:	9b02      	ldr	r3, [sp, #8]
 8003606:	701c      	strb	r4, [r3, #0]
 8003608:	b01d      	add	sp, #116	@ 0x74
 800360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800360e:	b003      	add	sp, #12
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000018 	.word	0x20000018
 8003618:	ffff0208 	.word	0xffff0208

0800361c <__sread>:
 800361c:	b510      	push	{r4, lr}
 800361e:	460c      	mov	r4, r1
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	f000 f8fc 	bl	8003820 <_read_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	bfab      	itete	ge
 800362c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800362e:	89a3      	ldrhlt	r3, [r4, #12]
 8003630:	181b      	addge	r3, r3, r0
 8003632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003636:	bfac      	ite	ge
 8003638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800363a:	81a3      	strhlt	r3, [r4, #12]
 800363c:	bd10      	pop	{r4, pc}

0800363e <__swrite>:
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	461f      	mov	r7, r3
 8003644:	898b      	ldrh	r3, [r1, #12]
 8003646:	4605      	mov	r5, r0
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	460c      	mov	r4, r1
 800364c:	4616      	mov	r6, r2
 800364e:	d505      	bpl.n	800365c <__swrite+0x1e>
 8003650:	2302      	movs	r3, #2
 8003652:	2200      	movs	r2, #0
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	f000 f8d0 	bl	80037fc <_lseek_r>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	4632      	mov	r2, r6
 8003660:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	4628      	mov	r0, r5
 8003668:	463b      	mov	r3, r7
 800366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800366e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	f000 b8e7 	b.w	8003844 <_write_r>

08003676 <__sseek>:
 8003676:	b510      	push	{r4, lr}
 8003678:	460c      	mov	r4, r1
 800367a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367e:	f000 f8bd 	bl	80037fc <_lseek_r>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	bf15      	itete	ne
 8003688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800368a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800368e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003692:	81a3      	strheq	r3, [r4, #12]
 8003694:	bf18      	it	ne
 8003696:	81a3      	strhne	r3, [r4, #12]
 8003698:	bd10      	pop	{r4, pc}

0800369a <__sclose>:
 800369a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369e:	f000 b89d 	b.w	80037dc <_close_r>

080036a2 <__swbuf_r>:
 80036a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a4:	460e      	mov	r6, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	4605      	mov	r5, r0
 80036aa:	b118      	cbz	r0, 80036b4 <__swbuf_r+0x12>
 80036ac:	6a03      	ldr	r3, [r0, #32]
 80036ae:	b90b      	cbnz	r3, 80036b4 <__swbuf_r+0x12>
 80036b0:	f7ff feec 	bl	800348c <__sinit>
 80036b4:	69a3      	ldr	r3, [r4, #24]
 80036b6:	60a3      	str	r3, [r4, #8]
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	071a      	lsls	r2, r3, #28
 80036bc:	d501      	bpl.n	80036c2 <__swbuf_r+0x20>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	b943      	cbnz	r3, 80036d4 <__swbuf_r+0x32>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f82b 	bl	8003720 <__swsetup_r>
 80036ca:	b118      	cbz	r0, 80036d4 <__swbuf_r+0x32>
 80036cc:	f04f 37ff 	mov.w	r7, #4294967295
 80036d0:	4638      	mov	r0, r7
 80036d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6922      	ldr	r2, [r4, #16]
 80036d8:	b2f6      	uxtb	r6, r6
 80036da:	1a98      	subs	r0, r3, r2
 80036dc:	6963      	ldr	r3, [r4, #20]
 80036de:	4637      	mov	r7, r6
 80036e0:	4283      	cmp	r3, r0
 80036e2:	dc05      	bgt.n	80036f0 <__swbuf_r+0x4e>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 fe8a 	bl	8004400 <_fflush_r>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1ed      	bne.n	80036cc <__swbuf_r+0x2a>
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	701e      	strb	r6, [r3, #0]
 80036fe:	6962      	ldr	r2, [r4, #20]
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	429a      	cmp	r2, r3
 8003704:	d004      	beq.n	8003710 <__swbuf_r+0x6e>
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	07db      	lsls	r3, r3, #31
 800370a:	d5e1      	bpl.n	80036d0 <__swbuf_r+0x2e>
 800370c:	2e0a      	cmp	r6, #10
 800370e:	d1df      	bne.n	80036d0 <__swbuf_r+0x2e>
 8003710:	4621      	mov	r1, r4
 8003712:	4628      	mov	r0, r5
 8003714:	f000 fe74 	bl	8004400 <_fflush_r>
 8003718:	2800      	cmp	r0, #0
 800371a:	d0d9      	beq.n	80036d0 <__swbuf_r+0x2e>
 800371c:	e7d6      	b.n	80036cc <__swbuf_r+0x2a>
	...

08003720 <__swsetup_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <__swsetup_r+0xa8>)
 8003724:	4605      	mov	r5, r0
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	460c      	mov	r4, r1
 800372a:	b118      	cbz	r0, 8003734 <__swsetup_r+0x14>
 800372c:	6a03      	ldr	r3, [r0, #32]
 800372e:	b90b      	cbnz	r3, 8003734 <__swsetup_r+0x14>
 8003730:	f7ff feac 	bl	800348c <__sinit>
 8003734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003738:	0719      	lsls	r1, r3, #28
 800373a:	d422      	bmi.n	8003782 <__swsetup_r+0x62>
 800373c:	06da      	lsls	r2, r3, #27
 800373e:	d407      	bmi.n	8003750 <__swsetup_r+0x30>
 8003740:	2209      	movs	r2, #9
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	e033      	b.n	80037b8 <__swsetup_r+0x98>
 8003750:	0758      	lsls	r0, r3, #29
 8003752:	d512      	bpl.n	800377a <__swsetup_r+0x5a>
 8003754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003756:	b141      	cbz	r1, 800376a <__swsetup_r+0x4a>
 8003758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800375c:	4299      	cmp	r1, r3
 800375e:	d002      	beq.n	8003766 <__swsetup_r+0x46>
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f8af 	bl	80038c4 <_free_r>
 8003766:	2300      	movs	r3, #0
 8003768:	6363      	str	r3, [r4, #52]	@ 0x34
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	6063      	str	r3, [r4, #4]
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	b94b      	cbnz	r3, 800379a <__swsetup_r+0x7a>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d003      	beq.n	800379a <__swsetup_r+0x7a>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 fe80 	bl	800449a <__smakebuf_r>
 800379a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379e:	f013 0201 	ands.w	r2, r3, #1
 80037a2:	d00a      	beq.n	80037ba <__swsetup_r+0x9a>
 80037a4:	2200      	movs	r2, #0
 80037a6:	60a2      	str	r2, [r4, #8]
 80037a8:	6962      	ldr	r2, [r4, #20]
 80037aa:	4252      	negs	r2, r2
 80037ac:	61a2      	str	r2, [r4, #24]
 80037ae:	6922      	ldr	r2, [r4, #16]
 80037b0:	b942      	cbnz	r2, 80037c4 <__swsetup_r+0xa4>
 80037b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037b6:	d1c5      	bne.n	8003744 <__swsetup_r+0x24>
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
 80037ba:	0799      	lsls	r1, r3, #30
 80037bc:	bf58      	it	pl
 80037be:	6962      	ldrpl	r2, [r4, #20]
 80037c0:	60a2      	str	r2, [r4, #8]
 80037c2:	e7f4      	b.n	80037ae <__swsetup_r+0x8e>
 80037c4:	2000      	movs	r0, #0
 80037c6:	e7f7      	b.n	80037b8 <__swsetup_r+0x98>
 80037c8:	20000018 	.word	0x20000018

080037cc <memset>:
 80037cc:	4603      	mov	r3, r0
 80037ce:	4402      	add	r2, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_close_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	2300      	movs	r3, #0
 80037e0:	4d05      	ldr	r5, [pc, #20]	@ (80037f8 <_close_r+0x1c>)
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd fb05 	bl	8000df6 <_close>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_close_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_close_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	20000320 	.word	0x20000320

080037fc <_lseek_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	2200      	movs	r2, #0
 8003806:	4d05      	ldr	r5, [pc, #20]	@ (800381c <_lseek_r+0x20>)
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fd fb17 	bl	8000e3e <_lseek>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_lseek_r+0x1e>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_lseek_r+0x1e>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	20000320 	.word	0x20000320

08003820 <_read_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4604      	mov	r4, r0
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	2200      	movs	r2, #0
 800382a:	4d05      	ldr	r5, [pc, #20]	@ (8003840 <_read_r+0x20>)
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f7fd faa8 	bl	8000d84 <_read>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_read_r+0x1e>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_read_r+0x1e>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	20000320 	.word	0x20000320

08003844 <_write_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	4611      	mov	r1, r2
 800384c:	2200      	movs	r2, #0
 800384e:	4d05      	ldr	r5, [pc, #20]	@ (8003864 <_write_r+0x20>)
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd fab3 	bl	8000dbe <_write>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_write_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_write_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000320 	.word	0x20000320

08003868 <__errno>:
 8003868:	4b01      	ldr	r3, [pc, #4]	@ (8003870 <__errno+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000018 	.word	0x20000018

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	2600      	movs	r6, #0
 8003878:	4d0c      	ldr	r5, [pc, #48]	@ (80038ac <__libc_init_array+0x38>)
 800387a:	4c0d      	ldr	r4, [pc, #52]	@ (80038b0 <__libc_init_array+0x3c>)
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	f000 fee4 	bl	8004650 <_init>
 8003888:	2600      	movs	r6, #0
 800388a:	4d0a      	ldr	r5, [pc, #40]	@ (80038b4 <__libc_init_array+0x40>)
 800388c:	4c0a      	ldr	r4, [pc, #40]	@ (80038b8 <__libc_init_array+0x44>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	080047b8 	.word	0x080047b8
 80038b0:	080047b8 	.word	0x080047b8
 80038b4:	080047b8 	.word	0x080047b8
 80038b8:	080047bc 	.word	0x080047bc

080038bc <__retarget_lock_init_recursive>:
 80038bc:	4770      	bx	lr

080038be <__retarget_lock_acquire_recursive>:
 80038be:	4770      	bx	lr

080038c0 <__retarget_lock_release_recursive>:
 80038c0:	4770      	bx	lr
	...

080038c4 <_free_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4605      	mov	r5, r0
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d040      	beq.n	800394e <_free_r+0x8a>
 80038cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d0:	1f0c      	subs	r4, r1, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfb8      	it	lt
 80038d6:	18e4      	addlt	r4, r4, r3
 80038d8:	f000 f8de 	bl	8003a98 <__malloc_lock>
 80038dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003950 <_free_r+0x8c>)
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	b933      	cbnz	r3, 80038f0 <_free_r+0x2c>
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6014      	str	r4, [r2, #0]
 80038e6:	4628      	mov	r0, r5
 80038e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ec:	f000 b8da 	b.w	8003aa4 <__malloc_unlock>
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d908      	bls.n	8003906 <_free_r+0x42>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	1821      	adds	r1, r4, r0
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf01      	itttt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	1809      	addeq	r1, r1, r0
 8003902:	6021      	streq	r1, [r4, #0]
 8003904:	e7ed      	b.n	80038e2 <_free_r+0x1e>
 8003906:	461a      	mov	r2, r3
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b10b      	cbz	r3, 8003910 <_free_r+0x4c>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d9fa      	bls.n	8003906 <_free_r+0x42>
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	1850      	adds	r0, r2, r1
 8003914:	42a0      	cmp	r0, r4
 8003916:	d10b      	bne.n	8003930 <_free_r+0x6c>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	4401      	add	r1, r0
 800391c:	1850      	adds	r0, r2, r1
 800391e:	4283      	cmp	r3, r0
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	d1e0      	bne.n	80038e6 <_free_r+0x22>
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4408      	add	r0, r1
 800392a:	6010      	str	r0, [r2, #0]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	e7da      	b.n	80038e6 <_free_r+0x22>
 8003930:	d902      	bls.n	8003938 <_free_r+0x74>
 8003932:	230c      	movs	r3, #12
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	e7d6      	b.n	80038e6 <_free_r+0x22>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	1821      	adds	r1, r4, r0
 800393c:	428b      	cmp	r3, r1
 800393e:	bf01      	itttt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	1809      	addeq	r1, r1, r0
 8003946:	6021      	streq	r1, [r4, #0]
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6054      	str	r4, [r2, #4]
 800394c:	e7cb      	b.n	80038e6 <_free_r+0x22>
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	2000032c 	.word	0x2000032c

08003954 <sbrk_aligned>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4e0f      	ldr	r6, [pc, #60]	@ (8003994 <sbrk_aligned+0x40>)
 8003958:	460c      	mov	r4, r1
 800395a:	6831      	ldr	r1, [r6, #0]
 800395c:	4605      	mov	r5, r0
 800395e:	b911      	cbnz	r1, 8003966 <sbrk_aligned+0x12>
 8003960:	f000 fe14 	bl	800458c <_sbrk_r>
 8003964:	6030      	str	r0, [r6, #0]
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 fe0f 	bl	800458c <_sbrk_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d103      	bne.n	800397a <sbrk_aligned+0x26>
 8003972:	f04f 34ff 	mov.w	r4, #4294967295
 8003976:	4620      	mov	r0, r4
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d0f8      	beq.n	8003976 <sbrk_aligned+0x22>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4628      	mov	r0, r5
 8003988:	f000 fe00 	bl	800458c <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d1f2      	bne.n	8003976 <sbrk_aligned+0x22>
 8003990:	e7ef      	b.n	8003972 <sbrk_aligned+0x1e>
 8003992:	bf00      	nop
 8003994:	20000328 	.word	0x20000328

08003998 <_malloc_r>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	1ccd      	adds	r5, r1, #3
 800399e:	f025 0503 	bic.w	r5, r5, #3
 80039a2:	3508      	adds	r5, #8
 80039a4:	2d0c      	cmp	r5, #12
 80039a6:	bf38      	it	cc
 80039a8:	250c      	movcc	r5, #12
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	4606      	mov	r6, r0
 80039ae:	db01      	blt.n	80039b4 <_malloc_r+0x1c>
 80039b0:	42a9      	cmp	r1, r5
 80039b2:	d904      	bls.n	80039be <_malloc_r+0x26>
 80039b4:	230c      	movs	r3, #12
 80039b6:	6033      	str	r3, [r6, #0]
 80039b8:	2000      	movs	r0, #0
 80039ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a94 <_malloc_r+0xfc>
 80039c2:	f000 f869 	bl	8003a98 <__malloc_lock>
 80039c6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ca:	461c      	mov	r4, r3
 80039cc:	bb44      	cbnz	r4, 8003a20 <_malloc_r+0x88>
 80039ce:	4629      	mov	r1, r5
 80039d0:	4630      	mov	r0, r6
 80039d2:	f7ff ffbf 	bl	8003954 <sbrk_aligned>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	4604      	mov	r4, r0
 80039da:	d158      	bne.n	8003a8e <_malloc_r+0xf6>
 80039dc:	f8d8 4000 	ldr.w	r4, [r8]
 80039e0:	4627      	mov	r7, r4
 80039e2:	2f00      	cmp	r7, #0
 80039e4:	d143      	bne.n	8003a6e <_malloc_r+0xd6>
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	d04b      	beq.n	8003a82 <_malloc_r+0xea>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	4639      	mov	r1, r7
 80039ee:	4630      	mov	r0, r6
 80039f0:	eb04 0903 	add.w	r9, r4, r3
 80039f4:	f000 fdca 	bl	800458c <_sbrk_r>
 80039f8:	4581      	cmp	r9, r0
 80039fa:	d142      	bne.n	8003a82 <_malloc_r+0xea>
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	4630      	mov	r0, r6
 8003a00:	1a6d      	subs	r5, r5, r1
 8003a02:	4629      	mov	r1, r5
 8003a04:	f7ff ffa6 	bl	8003954 <sbrk_aligned>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d03a      	beq.n	8003a82 <_malloc_r+0xea>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	442b      	add	r3, r5
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	f8d8 3000 	ldr.w	r3, [r8]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	bb62      	cbnz	r2, 8003a74 <_malloc_r+0xdc>
 8003a1a:	f8c8 7000 	str.w	r7, [r8]
 8003a1e:	e00f      	b.n	8003a40 <_malloc_r+0xa8>
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	1b52      	subs	r2, r2, r5
 8003a24:	d420      	bmi.n	8003a68 <_malloc_r+0xd0>
 8003a26:	2a0b      	cmp	r2, #11
 8003a28:	d917      	bls.n	8003a5a <_malloc_r+0xc2>
 8003a2a:	1961      	adds	r1, r4, r5
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	6025      	str	r5, [r4, #0]
 8003a30:	bf18      	it	ne
 8003a32:	6059      	strne	r1, [r3, #4]
 8003a34:	6863      	ldr	r3, [r4, #4]
 8003a36:	bf08      	it	eq
 8003a38:	f8c8 1000 	streq.w	r1, [r8]
 8003a3c:	5162      	str	r2, [r4, r5]
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 f82f 	bl	8003aa4 <__malloc_unlock>
 8003a46:	f104 000b 	add.w	r0, r4, #11
 8003a4a:	1d23      	adds	r3, r4, #4
 8003a4c:	f020 0007 	bic.w	r0, r0, #7
 8003a50:	1ac2      	subs	r2, r0, r3
 8003a52:	bf1c      	itt	ne
 8003a54:	1a1b      	subne	r3, r3, r0
 8003a56:	50a3      	strne	r3, [r4, r2]
 8003a58:	e7af      	b.n	80039ba <_malloc_r+0x22>
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	bf0c      	ite	eq
 8003a60:	f8c8 2000 	streq.w	r2, [r8]
 8003a64:	605a      	strne	r2, [r3, #4]
 8003a66:	e7eb      	b.n	8003a40 <_malloc_r+0xa8>
 8003a68:	4623      	mov	r3, r4
 8003a6a:	6864      	ldr	r4, [r4, #4]
 8003a6c:	e7ae      	b.n	80039cc <_malloc_r+0x34>
 8003a6e:	463c      	mov	r4, r7
 8003a70:	687f      	ldr	r7, [r7, #4]
 8003a72:	e7b6      	b.n	80039e2 <_malloc_r+0x4a>
 8003a74:	461a      	mov	r2, r3
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d1fb      	bne.n	8003a74 <_malloc_r+0xdc>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6053      	str	r3, [r2, #4]
 8003a80:	e7de      	b.n	8003a40 <_malloc_r+0xa8>
 8003a82:	230c      	movs	r3, #12
 8003a84:	4630      	mov	r0, r6
 8003a86:	6033      	str	r3, [r6, #0]
 8003a88:	f000 f80c 	bl	8003aa4 <__malloc_unlock>
 8003a8c:	e794      	b.n	80039b8 <_malloc_r+0x20>
 8003a8e:	6005      	str	r5, [r0, #0]
 8003a90:	e7d6      	b.n	8003a40 <_malloc_r+0xa8>
 8003a92:	bf00      	nop
 8003a94:	2000032c 	.word	0x2000032c

08003a98 <__malloc_lock>:
 8003a98:	4801      	ldr	r0, [pc, #4]	@ (8003aa0 <__malloc_lock+0x8>)
 8003a9a:	f7ff bf10 	b.w	80038be <__retarget_lock_acquire_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	20000324 	.word	0x20000324

08003aa4 <__malloc_unlock>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	@ (8003aac <__malloc_unlock+0x8>)
 8003aa6:	f7ff bf0b 	b.w	80038c0 <__retarget_lock_release_recursive>
 8003aaa:	bf00      	nop
 8003aac:	20000324 	.word	0x20000324

08003ab0 <__ssputs_r>:
 8003ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab4:	461f      	mov	r7, r3
 8003ab6:	688e      	ldr	r6, [r1, #8]
 8003ab8:	4682      	mov	sl, r0
 8003aba:	42be      	cmp	r6, r7
 8003abc:	460c      	mov	r4, r1
 8003abe:	4690      	mov	r8, r2
 8003ac0:	680b      	ldr	r3, [r1, #0]
 8003ac2:	d82d      	bhi.n	8003b20 <__ssputs_r+0x70>
 8003ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003acc:	d026      	beq.n	8003b1c <__ssputs_r+0x6c>
 8003ace:	6965      	ldr	r5, [r4, #20]
 8003ad0:	6909      	ldr	r1, [r1, #16]
 8003ad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ad6:	eba3 0901 	sub.w	r9, r3, r1
 8003ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ade:	1c7b      	adds	r3, r7, #1
 8003ae0:	444b      	add	r3, r9
 8003ae2:	106d      	asrs	r5, r5, #1
 8003ae4:	429d      	cmp	r5, r3
 8003ae6:	bf38      	it	cc
 8003ae8:	461d      	movcc	r5, r3
 8003aea:	0553      	lsls	r3, r2, #21
 8003aec:	d527      	bpl.n	8003b3e <__ssputs_r+0x8e>
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7ff ff52 	bl	8003998 <_malloc_r>
 8003af4:	4606      	mov	r6, r0
 8003af6:	b360      	cbz	r0, 8003b52 <__ssputs_r+0xa2>
 8003af8:	464a      	mov	r2, r9
 8003afa:	6921      	ldr	r1, [r4, #16]
 8003afc:	f000 fd64 	bl	80045c8 <memcpy>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0a:	81a3      	strh	r3, [r4, #12]
 8003b0c:	6126      	str	r6, [r4, #16]
 8003b0e:	444e      	add	r6, r9
 8003b10:	6026      	str	r6, [r4, #0]
 8003b12:	463e      	mov	r6, r7
 8003b14:	6165      	str	r5, [r4, #20]
 8003b16:	eba5 0509 	sub.w	r5, r5, r9
 8003b1a:	60a5      	str	r5, [r4, #8]
 8003b1c:	42be      	cmp	r6, r7
 8003b1e:	d900      	bls.n	8003b22 <__ssputs_r+0x72>
 8003b20:	463e      	mov	r6, r7
 8003b22:	4632      	mov	r2, r6
 8003b24:	4641      	mov	r1, r8
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	f000 fcf3 	bl	8004512 <memmove>
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	1b9b      	subs	r3, r3, r6
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	4433      	add	r3, r6
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3e:	462a      	mov	r2, r5
 8003b40:	f000 fd50 	bl	80045e4 <_realloc_r>
 8003b44:	4606      	mov	r6, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d1e0      	bne.n	8003b0c <__ssputs_r+0x5c>
 8003b4a:	4650      	mov	r0, sl
 8003b4c:	6921      	ldr	r1, [r4, #16]
 8003b4e:	f7ff feb9 	bl	80038c4 <_free_r>
 8003b52:	230c      	movs	r3, #12
 8003b54:	f8ca 3000 	str.w	r3, [sl]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b62:	81a3      	strh	r3, [r4, #12]
 8003b64:	e7e9      	b.n	8003b3a <__ssputs_r+0x8a>
	...

08003b68 <_svfiprintf_r>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	4698      	mov	r8, r3
 8003b6e:	898b      	ldrh	r3, [r1, #12]
 8003b70:	4607      	mov	r7, r0
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	460d      	mov	r5, r1
 8003b76:	4614      	mov	r4, r2
 8003b78:	b09d      	sub	sp, #116	@ 0x74
 8003b7a:	d510      	bpl.n	8003b9e <_svfiprintf_r+0x36>
 8003b7c:	690b      	ldr	r3, [r1, #16]
 8003b7e:	b973      	cbnz	r3, 8003b9e <_svfiprintf_r+0x36>
 8003b80:	2140      	movs	r1, #64	@ 0x40
 8003b82:	f7ff ff09 	bl	8003998 <_malloc_r>
 8003b86:	6028      	str	r0, [r5, #0]
 8003b88:	6128      	str	r0, [r5, #16]
 8003b8a:	b930      	cbnz	r0, 8003b9a <_svfiprintf_r+0x32>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	b01d      	add	sp, #116	@ 0x74
 8003b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9a:	2340      	movs	r3, #64	@ 0x40
 8003b9c:	616b      	str	r3, [r5, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ba8:	2330      	movs	r3, #48	@ 0x30
 8003baa:	f04f 0901 	mov.w	r9, #1
 8003bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bb2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d4c <_svfiprintf_r+0x1e4>
 8003bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bba:	4623      	mov	r3, r4
 8003bbc:	469a      	mov	sl, r3
 8003bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc2:	b10a      	cbz	r2, 8003bc8 <_svfiprintf_r+0x60>
 8003bc4:	2a25      	cmp	r2, #37	@ 0x25
 8003bc6:	d1f9      	bne.n	8003bbc <_svfiprintf_r+0x54>
 8003bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bcc:	d00b      	beq.n	8003be6 <_svfiprintf_r+0x7e>
 8003bce:	465b      	mov	r3, fp
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f7ff ff6b 	bl	8003ab0 <__ssputs_r>
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f000 80a7 	beq.w	8003d2e <_svfiprintf_r+0x1c6>
 8003be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003be2:	445a      	add	r2, fp
 8003be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003be6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 809f 	beq.w	8003d2e <_svfiprintf_r+0x1c6>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bfa:	f10a 0a01 	add.w	sl, sl, #1
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	9307      	str	r3, [sp, #28]
 8003c02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c06:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c08:	4654      	mov	r4, sl
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c10:	484e      	ldr	r0, [pc, #312]	@ (8003d4c <_svfiprintf_r+0x1e4>)
 8003c12:	f000 fccb 	bl	80045ac <memchr>
 8003c16:	9a04      	ldr	r2, [sp, #16]
 8003c18:	b9d8      	cbnz	r0, 8003c52 <_svfiprintf_r+0xea>
 8003c1a:	06d0      	lsls	r0, r2, #27
 8003c1c:	bf44      	itt	mi
 8003c1e:	2320      	movmi	r3, #32
 8003c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c24:	0711      	lsls	r1, r2, #28
 8003c26:	bf44      	itt	mi
 8003c28:	232b      	movmi	r3, #43	@ 0x2b
 8003c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c34:	d015      	beq.n	8003c62 <_svfiprintf_r+0xfa>
 8003c36:	4654      	mov	r4, sl
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f04f 0c0a 	mov.w	ip, #10
 8003c3e:	9a07      	ldr	r2, [sp, #28]
 8003c40:	4621      	mov	r1, r4
 8003c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c46:	3b30      	subs	r3, #48	@ 0x30
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d94b      	bls.n	8003ce4 <_svfiprintf_r+0x17c>
 8003c4c:	b1b0      	cbz	r0, 8003c7c <_svfiprintf_r+0x114>
 8003c4e:	9207      	str	r2, [sp, #28]
 8003c50:	e014      	b.n	8003c7c <_svfiprintf_r+0x114>
 8003c52:	eba0 0308 	sub.w	r3, r0, r8
 8003c56:	fa09 f303 	lsl.w	r3, r9, r3
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	46a2      	mov	sl, r4
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	e7d2      	b.n	8003c08 <_svfiprintf_r+0xa0>
 8003c62:	9b03      	ldr	r3, [sp, #12]
 8003c64:	1d19      	adds	r1, r3, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	9103      	str	r1, [sp, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbb      	ittet	lt
 8003c6e:	425b      	neglt	r3, r3
 8003c70:	f042 0202 	orrlt.w	r2, r2, #2
 8003c74:	9307      	strge	r3, [sp, #28]
 8003c76:	9307      	strlt	r3, [sp, #28]
 8003c78:	bfb8      	it	lt
 8003c7a:	9204      	strlt	r2, [sp, #16]
 8003c7c:	7823      	ldrb	r3, [r4, #0]
 8003c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c80:	d10a      	bne.n	8003c98 <_svfiprintf_r+0x130>
 8003c82:	7863      	ldrb	r3, [r4, #1]
 8003c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c86:	d132      	bne.n	8003cee <_svfiprintf_r+0x186>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	3402      	adds	r4, #2
 8003c8c:	1d1a      	adds	r2, r3, #4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	9203      	str	r2, [sp, #12]
 8003c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c96:	9305      	str	r3, [sp, #20]
 8003c98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d50 <_svfiprintf_r+0x1e8>
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	7821      	ldrb	r1, [r4, #0]
 8003ca2:	f000 fc83 	bl	80045ac <memchr>
 8003ca6:	b138      	cbz	r0, 8003cb8 <_svfiprintf_r+0x150>
 8003ca8:	2240      	movs	r2, #64	@ 0x40
 8003caa:	9b04      	ldr	r3, [sp, #16]
 8003cac:	eba0 000a 	sub.w	r0, r0, sl
 8003cb0:	4082      	lsls	r2, r0
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	3401      	adds	r4, #1
 8003cb6:	9304      	str	r3, [sp, #16]
 8003cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	4825      	ldr	r0, [pc, #148]	@ (8003d54 <_svfiprintf_r+0x1ec>)
 8003cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cc4:	f000 fc72 	bl	80045ac <memchr>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d036      	beq.n	8003d3a <_svfiprintf_r+0x1d2>
 8003ccc:	4b22      	ldr	r3, [pc, #136]	@ (8003d58 <_svfiprintf_r+0x1f0>)
 8003cce:	bb1b      	cbnz	r3, 8003d18 <_svfiprintf_r+0x1b0>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	3307      	adds	r3, #7
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	3308      	adds	r3, #8
 8003cda:	9303      	str	r3, [sp, #12]
 8003cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cde:	4433      	add	r3, r6
 8003ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ce2:	e76a      	b.n	8003bba <_svfiprintf_r+0x52>
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cec:	e7a8      	b.n	8003c40 <_svfiprintf_r+0xd8>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f04f 0c0a 	mov.w	ip, #10
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	3401      	adds	r4, #1
 8003cf8:	9305      	str	r3, [sp, #20]
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d00:	3a30      	subs	r2, #48	@ 0x30
 8003d02:	2a09      	cmp	r2, #9
 8003d04:	d903      	bls.n	8003d0e <_svfiprintf_r+0x1a6>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0c6      	beq.n	8003c98 <_svfiprintf_r+0x130>
 8003d0a:	9105      	str	r1, [sp, #20]
 8003d0c:	e7c4      	b.n	8003c98 <_svfiprintf_r+0x130>
 8003d0e:	4604      	mov	r4, r0
 8003d10:	2301      	movs	r3, #1
 8003d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d16:	e7f0      	b.n	8003cfa <_svfiprintf_r+0x192>
 8003d18:	ab03      	add	r3, sp, #12
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	462a      	mov	r2, r5
 8003d1e:	4638      	mov	r0, r7
 8003d20:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <_svfiprintf_r+0x1f4>)
 8003d22:	a904      	add	r1, sp, #16
 8003d24:	f3af 8000 	nop.w
 8003d28:	1c42      	adds	r2, r0, #1
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	d1d6      	bne.n	8003cdc <_svfiprintf_r+0x174>
 8003d2e:	89ab      	ldrh	r3, [r5, #12]
 8003d30:	065b      	lsls	r3, r3, #25
 8003d32:	f53f af2d 	bmi.w	8003b90 <_svfiprintf_r+0x28>
 8003d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d38:	e72c      	b.n	8003b94 <_svfiprintf_r+0x2c>
 8003d3a:	ab03      	add	r3, sp, #12
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	462a      	mov	r2, r5
 8003d40:	4638      	mov	r0, r7
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <_svfiprintf_r+0x1f4>)
 8003d44:	a904      	add	r1, sp, #16
 8003d46:	f000 f9bd 	bl	80040c4 <_printf_i>
 8003d4a:	e7ed      	b.n	8003d28 <_svfiprintf_r+0x1c0>
 8003d4c:	0800477a 	.word	0x0800477a
 8003d50:	08004780 	.word	0x08004780
 8003d54:	08004784 	.word	0x08004784
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	08003ab1 	.word	0x08003ab1

08003d60 <__sfputc_r>:
 8003d60:	6893      	ldr	r3, [r2, #8]
 8003d62:	b410      	push	{r4}
 8003d64:	3b01      	subs	r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	6093      	str	r3, [r2, #8]
 8003d6a:	da07      	bge.n	8003d7c <__sfputc_r+0x1c>
 8003d6c:	6994      	ldr	r4, [r2, #24]
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	db01      	blt.n	8003d76 <__sfputc_r+0x16>
 8003d72:	290a      	cmp	r1, #10
 8003d74:	d102      	bne.n	8003d7c <__sfputc_r+0x1c>
 8003d76:	bc10      	pop	{r4}
 8003d78:	f7ff bc93 	b.w	80036a2 <__swbuf_r>
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	1c58      	adds	r0, r3, #1
 8003d80:	6010      	str	r0, [r2, #0]
 8003d82:	7019      	strb	r1, [r3, #0]
 8003d84:	4608      	mov	r0, r1
 8003d86:	bc10      	pop	{r4}
 8003d88:	4770      	bx	lr

08003d8a <__sfputs_r>:
 8003d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	460f      	mov	r7, r1
 8003d90:	4614      	mov	r4, r2
 8003d92:	18d5      	adds	r5, r2, r3
 8003d94:	42ac      	cmp	r4, r5
 8003d96:	d101      	bne.n	8003d9c <__sfputs_r+0x12>
 8003d98:	2000      	movs	r0, #0
 8003d9a:	e007      	b.n	8003dac <__sfputs_r+0x22>
 8003d9c:	463a      	mov	r2, r7
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da4:	f7ff ffdc 	bl	8003d60 <__sfputc_r>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d1f3      	bne.n	8003d94 <__sfputs_r+0xa>
 8003dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003db0 <_vfiprintf_r>:
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	460d      	mov	r5, r1
 8003db6:	4614      	mov	r4, r2
 8003db8:	4698      	mov	r8, r3
 8003dba:	4606      	mov	r6, r0
 8003dbc:	b09d      	sub	sp, #116	@ 0x74
 8003dbe:	b118      	cbz	r0, 8003dc8 <_vfiprintf_r+0x18>
 8003dc0:	6a03      	ldr	r3, [r0, #32]
 8003dc2:	b90b      	cbnz	r3, 8003dc8 <_vfiprintf_r+0x18>
 8003dc4:	f7ff fb62 	bl	800348c <__sinit>
 8003dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dca:	07d9      	lsls	r1, r3, #31
 8003dcc:	d405      	bmi.n	8003dda <_vfiprintf_r+0x2a>
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	059a      	lsls	r2, r3, #22
 8003dd2:	d402      	bmi.n	8003dda <_vfiprintf_r+0x2a>
 8003dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dd6:	f7ff fd72 	bl	80038be <__retarget_lock_acquire_recursive>
 8003dda:	89ab      	ldrh	r3, [r5, #12]
 8003ddc:	071b      	lsls	r3, r3, #28
 8003dde:	d501      	bpl.n	8003de4 <_vfiprintf_r+0x34>
 8003de0:	692b      	ldr	r3, [r5, #16]
 8003de2:	b99b      	cbnz	r3, 8003e0c <_vfiprintf_r+0x5c>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff fc9a 	bl	8003720 <__swsetup_r>
 8003dec:	b170      	cbz	r0, 8003e0c <_vfiprintf_r+0x5c>
 8003dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003df0:	07dc      	lsls	r4, r3, #31
 8003df2:	d504      	bpl.n	8003dfe <_vfiprintf_r+0x4e>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	b01d      	add	sp, #116	@ 0x74
 8003dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	0598      	lsls	r0, r3, #22
 8003e02:	d4f7      	bmi.n	8003df4 <_vfiprintf_r+0x44>
 8003e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e06:	f7ff fd5b 	bl	80038c0 <__retarget_lock_release_recursive>
 8003e0a:	e7f3      	b.n	8003df4 <_vfiprintf_r+0x44>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e10:	2320      	movs	r3, #32
 8003e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e16:	2330      	movs	r3, #48	@ 0x30
 8003e18:	f04f 0901 	mov.w	r9, #1
 8003e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e20:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003fcc <_vfiprintf_r+0x21c>
 8003e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e28:	4623      	mov	r3, r4
 8003e2a:	469a      	mov	sl, r3
 8003e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e30:	b10a      	cbz	r2, 8003e36 <_vfiprintf_r+0x86>
 8003e32:	2a25      	cmp	r2, #37	@ 0x25
 8003e34:	d1f9      	bne.n	8003e2a <_vfiprintf_r+0x7a>
 8003e36:	ebba 0b04 	subs.w	fp, sl, r4
 8003e3a:	d00b      	beq.n	8003e54 <_vfiprintf_r+0xa4>
 8003e3c:	465b      	mov	r3, fp
 8003e3e:	4622      	mov	r2, r4
 8003e40:	4629      	mov	r1, r5
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff ffa1 	bl	8003d8a <__sfputs_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	f000 80a7 	beq.w	8003f9c <_vfiprintf_r+0x1ec>
 8003e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e50:	445a      	add	r2, fp
 8003e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e54:	f89a 3000 	ldrb.w	r3, [sl]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 809f 	beq.w	8003f9c <_vfiprintf_r+0x1ec>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e68:	f10a 0a01 	add.w	sl, sl, #1
 8003e6c:	9304      	str	r3, [sp, #16]
 8003e6e:	9307      	str	r3, [sp, #28]
 8003e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e76:	4654      	mov	r4, sl
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7e:	4853      	ldr	r0, [pc, #332]	@ (8003fcc <_vfiprintf_r+0x21c>)
 8003e80:	f000 fb94 	bl	80045ac <memchr>
 8003e84:	9a04      	ldr	r2, [sp, #16]
 8003e86:	b9d8      	cbnz	r0, 8003ec0 <_vfiprintf_r+0x110>
 8003e88:	06d1      	lsls	r1, r2, #27
 8003e8a:	bf44      	itt	mi
 8003e8c:	2320      	movmi	r3, #32
 8003e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e92:	0713      	lsls	r3, r2, #28
 8003e94:	bf44      	itt	mi
 8003e96:	232b      	movmi	r3, #43	@ 0x2b
 8003e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea2:	d015      	beq.n	8003ed0 <_vfiprintf_r+0x120>
 8003ea4:	4654      	mov	r4, sl
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f04f 0c0a 	mov.w	ip, #10
 8003eac:	9a07      	ldr	r2, [sp, #28]
 8003eae:	4621      	mov	r1, r4
 8003eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb4:	3b30      	subs	r3, #48	@ 0x30
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d94b      	bls.n	8003f52 <_vfiprintf_r+0x1a2>
 8003eba:	b1b0      	cbz	r0, 8003eea <_vfiprintf_r+0x13a>
 8003ebc:	9207      	str	r2, [sp, #28]
 8003ebe:	e014      	b.n	8003eea <_vfiprintf_r+0x13a>
 8003ec0:	eba0 0308 	sub.w	r3, r0, r8
 8003ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	46a2      	mov	sl, r4
 8003ecc:	9304      	str	r3, [sp, #16]
 8003ece:	e7d2      	b.n	8003e76 <_vfiprintf_r+0xc6>
 8003ed0:	9b03      	ldr	r3, [sp, #12]
 8003ed2:	1d19      	adds	r1, r3, #4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	9103      	str	r1, [sp, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bfbb      	ittet	lt
 8003edc:	425b      	neglt	r3, r3
 8003ede:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee2:	9307      	strge	r3, [sp, #28]
 8003ee4:	9307      	strlt	r3, [sp, #28]
 8003ee6:	bfb8      	it	lt
 8003ee8:	9204      	strlt	r2, [sp, #16]
 8003eea:	7823      	ldrb	r3, [r4, #0]
 8003eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eee:	d10a      	bne.n	8003f06 <_vfiprintf_r+0x156>
 8003ef0:	7863      	ldrb	r3, [r4, #1]
 8003ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef4:	d132      	bne.n	8003f5c <_vfiprintf_r+0x1ac>
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	3402      	adds	r4, #2
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	9203      	str	r2, [sp, #12]
 8003f00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f04:	9305      	str	r3, [sp, #20]
 8003f06:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003fd0 <_vfiprintf_r+0x220>
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	7821      	ldrb	r1, [r4, #0]
 8003f10:	f000 fb4c 	bl	80045ac <memchr>
 8003f14:	b138      	cbz	r0, 8003f26 <_vfiprintf_r+0x176>
 8003f16:	2240      	movs	r2, #64	@ 0x40
 8003f18:	9b04      	ldr	r3, [sp, #16]
 8003f1a:	eba0 000a 	sub.w	r0, r0, sl
 8003f1e:	4082      	lsls	r2, r0
 8003f20:	4313      	orrs	r3, r2
 8003f22:	3401      	adds	r4, #1
 8003f24:	9304      	str	r3, [sp, #16]
 8003f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	4829      	ldr	r0, [pc, #164]	@ (8003fd4 <_vfiprintf_r+0x224>)
 8003f2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f32:	f000 fb3b 	bl	80045ac <memchr>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d03f      	beq.n	8003fba <_vfiprintf_r+0x20a>
 8003f3a:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <_vfiprintf_r+0x228>)
 8003f3c:	bb1b      	cbnz	r3, 8003f86 <_vfiprintf_r+0x1d6>
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	3307      	adds	r3, #7
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	3308      	adds	r3, #8
 8003f48:	9303      	str	r3, [sp, #12]
 8003f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f4c:	443b      	add	r3, r7
 8003f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f50:	e76a      	b.n	8003e28 <_vfiprintf_r+0x78>
 8003f52:	460c      	mov	r4, r1
 8003f54:	2001      	movs	r0, #1
 8003f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f5a:	e7a8      	b.n	8003eae <_vfiprintf_r+0xfe>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f04f 0c0a 	mov.w	ip, #10
 8003f62:	4619      	mov	r1, r3
 8003f64:	3401      	adds	r4, #1
 8003f66:	9305      	str	r3, [sp, #20]
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f6e:	3a30      	subs	r2, #48	@ 0x30
 8003f70:	2a09      	cmp	r2, #9
 8003f72:	d903      	bls.n	8003f7c <_vfiprintf_r+0x1cc>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0c6      	beq.n	8003f06 <_vfiprintf_r+0x156>
 8003f78:	9105      	str	r1, [sp, #20]
 8003f7a:	e7c4      	b.n	8003f06 <_vfiprintf_r+0x156>
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	2301      	movs	r3, #1
 8003f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f84:	e7f0      	b.n	8003f68 <_vfiprintf_r+0x1b8>
 8003f86:	ab03      	add	r3, sp, #12
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <_vfiprintf_r+0x22c>)
 8003f90:	a904      	add	r1, sp, #16
 8003f92:	f3af 8000 	nop.w
 8003f96:	4607      	mov	r7, r0
 8003f98:	1c78      	adds	r0, r7, #1
 8003f9a:	d1d6      	bne.n	8003f4a <_vfiprintf_r+0x19a>
 8003f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f9e:	07d9      	lsls	r1, r3, #31
 8003fa0:	d405      	bmi.n	8003fae <_vfiprintf_r+0x1fe>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	059a      	lsls	r2, r3, #22
 8003fa6:	d402      	bmi.n	8003fae <_vfiprintf_r+0x1fe>
 8003fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003faa:	f7ff fc89 	bl	80038c0 <__retarget_lock_release_recursive>
 8003fae:	89ab      	ldrh	r3, [r5, #12]
 8003fb0:	065b      	lsls	r3, r3, #25
 8003fb2:	f53f af1f 	bmi.w	8003df4 <_vfiprintf_r+0x44>
 8003fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fb8:	e71e      	b.n	8003df8 <_vfiprintf_r+0x48>
 8003fba:	ab03      	add	r3, sp, #12
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <_vfiprintf_r+0x22c>)
 8003fc4:	a904      	add	r1, sp, #16
 8003fc6:	f000 f87d 	bl	80040c4 <_printf_i>
 8003fca:	e7e4      	b.n	8003f96 <_vfiprintf_r+0x1e6>
 8003fcc:	0800477a 	.word	0x0800477a
 8003fd0:	08004780 	.word	0x08004780
 8003fd4:	08004784 	.word	0x08004784
 8003fd8:	00000000 	.word	0x00000000
 8003fdc:	08003d8b 	.word	0x08003d8b

08003fe0 <_printf_common>:
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	4698      	mov	r8, r3
 8003fe8:	688a      	ldr	r2, [r1, #8]
 8003fea:	690b      	ldr	r3, [r1, #16]
 8003fec:	4607      	mov	r7, r0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bfb8      	it	lt
 8003ff2:	4613      	movlt	r3, r2
 8003ff4:	6033      	str	r3, [r6, #0]
 8003ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004000:	b10a      	cbz	r2, 8004006 <_printf_common+0x26>
 8004002:	3301      	adds	r3, #1
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	0699      	lsls	r1, r3, #26
 800400a:	bf42      	ittt	mi
 800400c:	6833      	ldrmi	r3, [r6, #0]
 800400e:	3302      	addmi	r3, #2
 8004010:	6033      	strmi	r3, [r6, #0]
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	f015 0506 	ands.w	r5, r5, #6
 8004018:	d106      	bne.n	8004028 <_printf_common+0x48>
 800401a:	f104 0a19 	add.w	sl, r4, #25
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	6832      	ldr	r2, [r6, #0]
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	42ab      	cmp	r3, r5
 8004026:	dc2b      	bgt.n	8004080 <_printf_common+0xa0>
 8004028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	3b00      	subs	r3, #0
 8004030:	bf18      	it	ne
 8004032:	2301      	movne	r3, #1
 8004034:	0692      	lsls	r2, r2, #26
 8004036:	d430      	bmi.n	800409a <_printf_common+0xba>
 8004038:	4641      	mov	r1, r8
 800403a:	4638      	mov	r0, r7
 800403c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004040:	47c8      	blx	r9
 8004042:	3001      	adds	r0, #1
 8004044:	d023      	beq.n	800408e <_printf_common+0xae>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	6922      	ldr	r2, [r4, #16]
 800404a:	f003 0306 	and.w	r3, r3, #6
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf14      	ite	ne
 8004052:	2500      	movne	r5, #0
 8004054:	6833      	ldreq	r3, [r6, #0]
 8004056:	f04f 0600 	mov.w	r6, #0
 800405a:	bf08      	it	eq
 800405c:	68e5      	ldreq	r5, [r4, #12]
 800405e:	f104 041a 	add.w	r4, r4, #26
 8004062:	bf08      	it	eq
 8004064:	1aed      	subeq	r5, r5, r3
 8004066:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800406a:	bf08      	it	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	4293      	cmp	r3, r2
 8004072:	bfc4      	itt	gt
 8004074:	1a9b      	subgt	r3, r3, r2
 8004076:	18ed      	addgt	r5, r5, r3
 8004078:	42b5      	cmp	r5, r6
 800407a:	d11a      	bne.n	80040b2 <_printf_common+0xd2>
 800407c:	2000      	movs	r0, #0
 800407e:	e008      	b.n	8004092 <_printf_common+0xb2>
 8004080:	2301      	movs	r3, #1
 8004082:	4652      	mov	r2, sl
 8004084:	4641      	mov	r1, r8
 8004086:	4638      	mov	r0, r7
 8004088:	47c8      	blx	r9
 800408a:	3001      	adds	r0, #1
 800408c:	d103      	bne.n	8004096 <_printf_common+0xb6>
 800408e:	f04f 30ff 	mov.w	r0, #4294967295
 8004092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004096:	3501      	adds	r5, #1
 8004098:	e7c1      	b.n	800401e <_printf_common+0x3e>
 800409a:	2030      	movs	r0, #48	@ 0x30
 800409c:	18e1      	adds	r1, r4, r3
 800409e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040a8:	4422      	add	r2, r4
 80040aa:	3302      	adds	r3, #2
 80040ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040b0:	e7c2      	b.n	8004038 <_printf_common+0x58>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4622      	mov	r2, r4
 80040b6:	4641      	mov	r1, r8
 80040b8:	4638      	mov	r0, r7
 80040ba:	47c8      	blx	r9
 80040bc:	3001      	adds	r0, #1
 80040be:	d0e6      	beq.n	800408e <_printf_common+0xae>
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7d9      	b.n	8004078 <_printf_common+0x98>

080040c4 <_printf_i>:
 80040c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	7e0f      	ldrb	r7, [r1, #24]
 80040ca:	4691      	mov	r9, r2
 80040cc:	2f78      	cmp	r7, #120	@ 0x78
 80040ce:	4680      	mov	r8, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	469a      	mov	sl, r3
 80040d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040da:	d807      	bhi.n	80040ec <_printf_i+0x28>
 80040dc:	2f62      	cmp	r7, #98	@ 0x62
 80040de:	d80a      	bhi.n	80040f6 <_printf_i+0x32>
 80040e0:	2f00      	cmp	r7, #0
 80040e2:	f000 80d1 	beq.w	8004288 <_printf_i+0x1c4>
 80040e6:	2f58      	cmp	r7, #88	@ 0x58
 80040e8:	f000 80b8 	beq.w	800425c <_printf_i+0x198>
 80040ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040f4:	e03a      	b.n	800416c <_printf_i+0xa8>
 80040f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040fa:	2b15      	cmp	r3, #21
 80040fc:	d8f6      	bhi.n	80040ec <_printf_i+0x28>
 80040fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004104 <_printf_i+0x40>)
 8004100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004171 	.word	0x08004171
 800410c:	080040ed 	.word	0x080040ed
 8004110:	080040ed 	.word	0x080040ed
 8004114:	080040ed 	.word	0x080040ed
 8004118:	080040ed 	.word	0x080040ed
 800411c:	08004171 	.word	0x08004171
 8004120:	080040ed 	.word	0x080040ed
 8004124:	080040ed 	.word	0x080040ed
 8004128:	080040ed 	.word	0x080040ed
 800412c:	080040ed 	.word	0x080040ed
 8004130:	0800426f 	.word	0x0800426f
 8004134:	0800419b 	.word	0x0800419b
 8004138:	08004229 	.word	0x08004229
 800413c:	080040ed 	.word	0x080040ed
 8004140:	080040ed 	.word	0x080040ed
 8004144:	08004291 	.word	0x08004291
 8004148:	080040ed 	.word	0x080040ed
 800414c:	0800419b 	.word	0x0800419b
 8004150:	080040ed 	.word	0x080040ed
 8004154:	080040ed 	.word	0x080040ed
 8004158:	08004231 	.word	0x08004231
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6032      	str	r2, [r6, #0]
 8004164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800416c:	2301      	movs	r3, #1
 800416e:	e09c      	b.n	80042aa <_printf_i+0x1e6>
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	1d19      	adds	r1, r3, #4
 8004176:	6031      	str	r1, [r6, #0]
 8004178:	0606      	lsls	r6, r0, #24
 800417a:	d501      	bpl.n	8004180 <_printf_i+0xbc>
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	e003      	b.n	8004188 <_printf_i+0xc4>
 8004180:	0645      	lsls	r5, r0, #25
 8004182:	d5fb      	bpl.n	800417c <_printf_i+0xb8>
 8004184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004188:	2d00      	cmp	r5, #0
 800418a:	da03      	bge.n	8004194 <_printf_i+0xd0>
 800418c:	232d      	movs	r3, #45	@ 0x2d
 800418e:	426d      	negs	r5, r5
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004194:	230a      	movs	r3, #10
 8004196:	4858      	ldr	r0, [pc, #352]	@ (80042f8 <_printf_i+0x234>)
 8004198:	e011      	b.n	80041be <_printf_i+0xfa>
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	0608      	lsls	r0, r1, #24
 80041a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80041a4:	d402      	bmi.n	80041ac <_printf_i+0xe8>
 80041a6:	0649      	lsls	r1, r1, #25
 80041a8:	bf48      	it	mi
 80041aa:	b2ad      	uxthmi	r5, r5
 80041ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	bf14      	ite	ne
 80041b2:	230a      	movne	r3, #10
 80041b4:	2308      	moveq	r3, #8
 80041b6:	4850      	ldr	r0, [pc, #320]	@ (80042f8 <_printf_i+0x234>)
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041be:	6866      	ldr	r6, [r4, #4]
 80041c0:	2e00      	cmp	r6, #0
 80041c2:	60a6      	str	r6, [r4, #8]
 80041c4:	db05      	blt.n	80041d2 <_printf_i+0x10e>
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	432e      	orrs	r6, r5
 80041ca:	f021 0104 	bic.w	r1, r1, #4
 80041ce:	6021      	str	r1, [r4, #0]
 80041d0:	d04b      	beq.n	800426a <_printf_i+0x1a6>
 80041d2:	4616      	mov	r6, r2
 80041d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80041d8:	fb03 5711 	mls	r7, r3, r1, r5
 80041dc:	5dc7      	ldrb	r7, [r0, r7]
 80041de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e2:	462f      	mov	r7, r5
 80041e4:	42bb      	cmp	r3, r7
 80041e6:	460d      	mov	r5, r1
 80041e8:	d9f4      	bls.n	80041d4 <_printf_i+0x110>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d10b      	bne.n	8004206 <_printf_i+0x142>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	07df      	lsls	r7, r3, #31
 80041f2:	d508      	bpl.n	8004206 <_printf_i+0x142>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	6861      	ldr	r1, [r4, #4]
 80041f8:	4299      	cmp	r1, r3
 80041fa:	bfde      	ittt	le
 80041fc:	2330      	movle	r3, #48	@ 0x30
 80041fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004202:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004206:	1b92      	subs	r2, r2, r6
 8004208:	6122      	str	r2, [r4, #16]
 800420a:	464b      	mov	r3, r9
 800420c:	4621      	mov	r1, r4
 800420e:	4640      	mov	r0, r8
 8004210:	f8cd a000 	str.w	sl, [sp]
 8004214:	aa03      	add	r2, sp, #12
 8004216:	f7ff fee3 	bl	8003fe0 <_printf_common>
 800421a:	3001      	adds	r0, #1
 800421c:	d14a      	bne.n	80042b4 <_printf_i+0x1f0>
 800421e:	f04f 30ff 	mov.w	r0, #4294967295
 8004222:	b004      	add	sp, #16
 8004224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	f043 0320 	orr.w	r3, r3, #32
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	2778      	movs	r7, #120	@ 0x78
 8004232:	4832      	ldr	r0, [pc, #200]	@ (80042fc <_printf_i+0x238>)
 8004234:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	6831      	ldr	r1, [r6, #0]
 800423c:	061f      	lsls	r7, r3, #24
 800423e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004242:	d402      	bmi.n	800424a <_printf_i+0x186>
 8004244:	065f      	lsls	r7, r3, #25
 8004246:	bf48      	it	mi
 8004248:	b2ad      	uxthmi	r5, r5
 800424a:	6031      	str	r1, [r6, #0]
 800424c:	07d9      	lsls	r1, r3, #31
 800424e:	bf44      	itt	mi
 8004250:	f043 0320 	orrmi.w	r3, r3, #32
 8004254:	6023      	strmi	r3, [r4, #0]
 8004256:	b11d      	cbz	r5, 8004260 <_printf_i+0x19c>
 8004258:	2310      	movs	r3, #16
 800425a:	e7ad      	b.n	80041b8 <_printf_i+0xf4>
 800425c:	4826      	ldr	r0, [pc, #152]	@ (80042f8 <_printf_i+0x234>)
 800425e:	e7e9      	b.n	8004234 <_printf_i+0x170>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	e7f6      	b.n	8004258 <_printf_i+0x194>
 800426a:	4616      	mov	r6, r2
 800426c:	e7bd      	b.n	80041ea <_printf_i+0x126>
 800426e:	6833      	ldr	r3, [r6, #0]
 8004270:	6825      	ldr	r5, [r4, #0]
 8004272:	1d18      	adds	r0, r3, #4
 8004274:	6961      	ldr	r1, [r4, #20]
 8004276:	6030      	str	r0, [r6, #0]
 8004278:	062e      	lsls	r6, r5, #24
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	d501      	bpl.n	8004282 <_printf_i+0x1be>
 800427e:	6019      	str	r1, [r3, #0]
 8004280:	e002      	b.n	8004288 <_printf_i+0x1c4>
 8004282:	0668      	lsls	r0, r5, #25
 8004284:	d5fb      	bpl.n	800427e <_printf_i+0x1ba>
 8004286:	8019      	strh	r1, [r3, #0]
 8004288:	2300      	movs	r3, #0
 800428a:	4616      	mov	r6, r2
 800428c:	6123      	str	r3, [r4, #16]
 800428e:	e7bc      	b.n	800420a <_printf_i+0x146>
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	2100      	movs	r1, #0
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	6032      	str	r2, [r6, #0]
 8004298:	681e      	ldr	r6, [r3, #0]
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f985 	bl	80045ac <memchr>
 80042a2:	b108      	cbz	r0, 80042a8 <_printf_i+0x1e4>
 80042a4:	1b80      	subs	r0, r0, r6
 80042a6:	6060      	str	r0, [r4, #4]
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2300      	movs	r3, #0
 80042ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b2:	e7aa      	b.n	800420a <_printf_i+0x146>
 80042b4:	4632      	mov	r2, r6
 80042b6:	4649      	mov	r1, r9
 80042b8:	4640      	mov	r0, r8
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	47d0      	blx	sl
 80042be:	3001      	adds	r0, #1
 80042c0:	d0ad      	beq.n	800421e <_printf_i+0x15a>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	079b      	lsls	r3, r3, #30
 80042c6:	d413      	bmi.n	80042f0 <_printf_i+0x22c>
 80042c8:	68e0      	ldr	r0, [r4, #12]
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	4298      	cmp	r0, r3
 80042ce:	bfb8      	it	lt
 80042d0:	4618      	movlt	r0, r3
 80042d2:	e7a6      	b.n	8004222 <_printf_i+0x15e>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4632      	mov	r2, r6
 80042d8:	4649      	mov	r1, r9
 80042da:	4640      	mov	r0, r8
 80042dc:	47d0      	blx	sl
 80042de:	3001      	adds	r0, #1
 80042e0:	d09d      	beq.n	800421e <_printf_i+0x15a>
 80042e2:	3501      	adds	r5, #1
 80042e4:	68e3      	ldr	r3, [r4, #12]
 80042e6:	9903      	ldr	r1, [sp, #12]
 80042e8:	1a5b      	subs	r3, r3, r1
 80042ea:	42ab      	cmp	r3, r5
 80042ec:	dcf2      	bgt.n	80042d4 <_printf_i+0x210>
 80042ee:	e7eb      	b.n	80042c8 <_printf_i+0x204>
 80042f0:	2500      	movs	r5, #0
 80042f2:	f104 0619 	add.w	r6, r4, #25
 80042f6:	e7f5      	b.n	80042e4 <_printf_i+0x220>
 80042f8:	0800478b 	.word	0x0800478b
 80042fc:	0800479c 	.word	0x0800479c

08004300 <__sflush_r>:
 8004300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	0716      	lsls	r6, r2, #28
 8004308:	4605      	mov	r5, r0
 800430a:	460c      	mov	r4, r1
 800430c:	d454      	bmi.n	80043b8 <__sflush_r+0xb8>
 800430e:	684b      	ldr	r3, [r1, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	dc02      	bgt.n	800431a <__sflush_r+0x1a>
 8004314:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	dd48      	ble.n	80043ac <__sflush_r+0xac>
 800431a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800431c:	2e00      	cmp	r6, #0
 800431e:	d045      	beq.n	80043ac <__sflush_r+0xac>
 8004320:	2300      	movs	r3, #0
 8004322:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004326:	682f      	ldr	r7, [r5, #0]
 8004328:	6a21      	ldr	r1, [r4, #32]
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	d030      	beq.n	8004390 <__sflush_r+0x90>
 800432e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	0759      	lsls	r1, r3, #29
 8004334:	d505      	bpl.n	8004342 <__sflush_r+0x42>
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800433c:	b10b      	cbz	r3, 8004342 <__sflush_r+0x42>
 800433e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	4628      	mov	r0, r5
 8004346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004348:	6a21      	ldr	r1, [r4, #32]
 800434a:	47b0      	blx	r6
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	d106      	bne.n	8004360 <__sflush_r+0x60>
 8004352:	6829      	ldr	r1, [r5, #0]
 8004354:	291d      	cmp	r1, #29
 8004356:	d82b      	bhi.n	80043b0 <__sflush_r+0xb0>
 8004358:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <__sflush_r+0xfc>)
 800435a:	40ca      	lsrs	r2, r1
 800435c:	07d6      	lsls	r6, r2, #31
 800435e:	d527      	bpl.n	80043b0 <__sflush_r+0xb0>
 8004360:	2200      	movs	r2, #0
 8004362:	6062      	str	r2, [r4, #4]
 8004364:	6922      	ldr	r2, [r4, #16]
 8004366:	04d9      	lsls	r1, r3, #19
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	d504      	bpl.n	8004376 <__sflush_r+0x76>
 800436c:	1c42      	adds	r2, r0, #1
 800436e:	d101      	bne.n	8004374 <__sflush_r+0x74>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b903      	cbnz	r3, 8004376 <__sflush_r+0x76>
 8004374:	6560      	str	r0, [r4, #84]	@ 0x54
 8004376:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004378:	602f      	str	r7, [r5, #0]
 800437a:	b1b9      	cbz	r1, 80043ac <__sflush_r+0xac>
 800437c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004380:	4299      	cmp	r1, r3
 8004382:	d002      	beq.n	800438a <__sflush_r+0x8a>
 8004384:	4628      	mov	r0, r5
 8004386:	f7ff fa9d 	bl	80038c4 <_free_r>
 800438a:	2300      	movs	r3, #0
 800438c:	6363      	str	r3, [r4, #52]	@ 0x34
 800438e:	e00d      	b.n	80043ac <__sflush_r+0xac>
 8004390:	2301      	movs	r3, #1
 8004392:	4628      	mov	r0, r5
 8004394:	47b0      	blx	r6
 8004396:	4602      	mov	r2, r0
 8004398:	1c50      	adds	r0, r2, #1
 800439a:	d1c9      	bne.n	8004330 <__sflush_r+0x30>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0c6      	beq.n	8004330 <__sflush_r+0x30>
 80043a2:	2b1d      	cmp	r3, #29
 80043a4:	d001      	beq.n	80043aa <__sflush_r+0xaa>
 80043a6:	2b16      	cmp	r3, #22
 80043a8:	d11d      	bne.n	80043e6 <__sflush_r+0xe6>
 80043aa:	602f      	str	r7, [r5, #0]
 80043ac:	2000      	movs	r0, #0
 80043ae:	e021      	b.n	80043f4 <__sflush_r+0xf4>
 80043b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	e01a      	b.n	80043ee <__sflush_r+0xee>
 80043b8:	690f      	ldr	r7, [r1, #16]
 80043ba:	2f00      	cmp	r7, #0
 80043bc:	d0f6      	beq.n	80043ac <__sflush_r+0xac>
 80043be:	0793      	lsls	r3, r2, #30
 80043c0:	bf18      	it	ne
 80043c2:	2300      	movne	r3, #0
 80043c4:	680e      	ldr	r6, [r1, #0]
 80043c6:	bf08      	it	eq
 80043c8:	694b      	ldreq	r3, [r1, #20]
 80043ca:	1bf6      	subs	r6, r6, r7
 80043cc:	600f      	str	r7, [r1, #0]
 80043ce:	608b      	str	r3, [r1, #8]
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	ddeb      	ble.n	80043ac <__sflush_r+0xac>
 80043d4:	4633      	mov	r3, r6
 80043d6:	463a      	mov	r2, r7
 80043d8:	4628      	mov	r0, r5
 80043da:	6a21      	ldr	r1, [r4, #32]
 80043dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80043e0:	47e0      	blx	ip
 80043e2:	2800      	cmp	r0, #0
 80043e4:	dc07      	bgt.n	80043f6 <__sflush_r+0xf6>
 80043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ee:	f04f 30ff 	mov.w	r0, #4294967295
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f6:	4407      	add	r7, r0
 80043f8:	1a36      	subs	r6, r6, r0
 80043fa:	e7e9      	b.n	80043d0 <__sflush_r+0xd0>
 80043fc:	20400001 	.word	0x20400001

08004400 <_fflush_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
 8004408:	b913      	cbnz	r3, 8004410 <_fflush_r+0x10>
 800440a:	2500      	movs	r5, #0
 800440c:	4628      	mov	r0, r5
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	b118      	cbz	r0, 800441a <_fflush_r+0x1a>
 8004412:	6a03      	ldr	r3, [r0, #32]
 8004414:	b90b      	cbnz	r3, 800441a <_fflush_r+0x1a>
 8004416:	f7ff f839 	bl	800348c <__sinit>
 800441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f3      	beq.n	800440a <_fflush_r+0xa>
 8004422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004424:	07d0      	lsls	r0, r2, #31
 8004426:	d404      	bmi.n	8004432 <_fflush_r+0x32>
 8004428:	0599      	lsls	r1, r3, #22
 800442a:	d402      	bmi.n	8004432 <_fflush_r+0x32>
 800442c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800442e:	f7ff fa46 	bl	80038be <__retarget_lock_acquire_recursive>
 8004432:	4628      	mov	r0, r5
 8004434:	4621      	mov	r1, r4
 8004436:	f7ff ff63 	bl	8004300 <__sflush_r>
 800443a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800443c:	4605      	mov	r5, r0
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d4e4      	bmi.n	800440c <_fflush_r+0xc>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	d4e1      	bmi.n	800440c <_fflush_r+0xc>
 8004448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800444a:	f7ff fa39 	bl	80038c0 <__retarget_lock_release_recursive>
 800444e:	e7dd      	b.n	800440c <_fflush_r+0xc>

08004450 <__swhatbuf_r>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	460c      	mov	r4, r1
 8004454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004458:	4615      	mov	r5, r2
 800445a:	2900      	cmp	r1, #0
 800445c:	461e      	mov	r6, r3
 800445e:	b096      	sub	sp, #88	@ 0x58
 8004460:	da0c      	bge.n	800447c <__swhatbuf_r+0x2c>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	2100      	movs	r1, #0
 8004466:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800446a:	bf14      	ite	ne
 800446c:	2340      	movne	r3, #64	@ 0x40
 800446e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004472:	2000      	movs	r0, #0
 8004474:	6031      	str	r1, [r6, #0]
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	b016      	add	sp, #88	@ 0x58
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	466a      	mov	r2, sp
 800447e:	f000 f863 	bl	8004548 <_fstat_r>
 8004482:	2800      	cmp	r0, #0
 8004484:	dbed      	blt.n	8004462 <__swhatbuf_r+0x12>
 8004486:	9901      	ldr	r1, [sp, #4]
 8004488:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800448c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004490:	4259      	negs	r1, r3
 8004492:	4159      	adcs	r1, r3
 8004494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004498:	e7eb      	b.n	8004472 <__swhatbuf_r+0x22>

0800449a <__smakebuf_r>:
 800449a:	898b      	ldrh	r3, [r1, #12]
 800449c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800449e:	079d      	lsls	r5, r3, #30
 80044a0:	4606      	mov	r6, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	d507      	bpl.n	80044b6 <__smakebuf_r+0x1c>
 80044a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	2301      	movs	r3, #1
 80044b0:	6163      	str	r3, [r4, #20]
 80044b2:	b003      	add	sp, #12
 80044b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b6:	466a      	mov	r2, sp
 80044b8:	ab01      	add	r3, sp, #4
 80044ba:	f7ff ffc9 	bl	8004450 <__swhatbuf_r>
 80044be:	9f00      	ldr	r7, [sp, #0]
 80044c0:	4605      	mov	r5, r0
 80044c2:	4639      	mov	r1, r7
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff fa67 	bl	8003998 <_malloc_r>
 80044ca:	b948      	cbnz	r0, 80044e0 <__smakebuf_r+0x46>
 80044cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d4ee      	bmi.n	80044b2 <__smakebuf_r+0x18>
 80044d4:	f023 0303 	bic.w	r3, r3, #3
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	e7e2      	b.n	80044a6 <__smakebuf_r+0xc>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	9b01      	ldr	r3, [sp, #4]
 80044ee:	6020      	str	r0, [r4, #0]
 80044f0:	b15b      	cbz	r3, 800450a <__smakebuf_r+0x70>
 80044f2:	4630      	mov	r0, r6
 80044f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f8:	f000 f838 	bl	800456c <_isatty_r>
 80044fc:	b128      	cbz	r0, 800450a <__smakebuf_r+0x70>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f023 0303 	bic.w	r3, r3, #3
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	431d      	orrs	r5, r3
 800450e:	81a5      	strh	r5, [r4, #12]
 8004510:	e7cf      	b.n	80044b2 <__smakebuf_r+0x18>

08004512 <memmove>:
 8004512:	4288      	cmp	r0, r1
 8004514:	b510      	push	{r4, lr}
 8004516:	eb01 0402 	add.w	r4, r1, r2
 800451a:	d902      	bls.n	8004522 <memmove+0x10>
 800451c:	4284      	cmp	r4, r0
 800451e:	4623      	mov	r3, r4
 8004520:	d807      	bhi.n	8004532 <memmove+0x20>
 8004522:	1e43      	subs	r3, r0, #1
 8004524:	42a1      	cmp	r1, r4
 8004526:	d008      	beq.n	800453a <memmove+0x28>
 8004528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004530:	e7f8      	b.n	8004524 <memmove+0x12>
 8004532:	4601      	mov	r1, r0
 8004534:	4402      	add	r2, r0
 8004536:	428a      	cmp	r2, r1
 8004538:	d100      	bne.n	800453c <memmove+0x2a>
 800453a:	bd10      	pop	{r4, pc}
 800453c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004540:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004544:	e7f7      	b.n	8004536 <memmove+0x24>
	...

08004548 <_fstat_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	2300      	movs	r3, #0
 800454c:	4d06      	ldr	r5, [pc, #24]	@ (8004568 <_fstat_r+0x20>)
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	f7fc fc59 	bl	8000e0c <_fstat>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d102      	bne.n	8004564 <_fstat_r+0x1c>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	b103      	cbz	r3, 8004564 <_fstat_r+0x1c>
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	bd38      	pop	{r3, r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	20000320 	.word	0x20000320

0800456c <_isatty_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	2300      	movs	r3, #0
 8004570:	4d05      	ldr	r5, [pc, #20]	@ (8004588 <_isatty_r+0x1c>)
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc fc57 	bl	8000e2a <_isatty>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_isatty_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_isatty_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000320 	.word	0x20000320

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	2300      	movs	r3, #0
 8004590:	4d05      	ldr	r5, [pc, #20]	@ (80045a8 <_sbrk_r+0x1c>)
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc fc5e 	bl	8000e58 <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	20000320 	.word	0x20000320

080045ac <memchr>:
 80045ac:	4603      	mov	r3, r0
 80045ae:	b510      	push	{r4, lr}
 80045b0:	b2c9      	uxtb	r1, r1
 80045b2:	4402      	add	r2, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	d101      	bne.n	80045be <memchr+0x12>
 80045ba:	2000      	movs	r0, #0
 80045bc:	e003      	b.n	80045c6 <memchr+0x1a>
 80045be:	7804      	ldrb	r4, [r0, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	428c      	cmp	r4, r1
 80045c4:	d1f6      	bne.n	80045b4 <memchr+0x8>
 80045c6:	bd10      	pop	{r4, pc}

080045c8 <memcpy>:
 80045c8:	440a      	add	r2, r1
 80045ca:	4291      	cmp	r1, r2
 80045cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80045d0:	d100      	bne.n	80045d4 <memcpy+0xc>
 80045d2:	4770      	bx	lr
 80045d4:	b510      	push	{r4, lr}
 80045d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045da:	4291      	cmp	r1, r2
 80045dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e0:	d1f9      	bne.n	80045d6 <memcpy+0xe>
 80045e2:	bd10      	pop	{r4, pc}

080045e4 <_realloc_r>:
 80045e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e8:	4607      	mov	r7, r0
 80045ea:	4614      	mov	r4, r2
 80045ec:	460d      	mov	r5, r1
 80045ee:	b921      	cbnz	r1, 80045fa <_realloc_r+0x16>
 80045f0:	4611      	mov	r1, r2
 80045f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f6:	f7ff b9cf 	b.w	8003998 <_malloc_r>
 80045fa:	b92a      	cbnz	r2, 8004608 <_realloc_r+0x24>
 80045fc:	f7ff f962 	bl	80038c4 <_free_r>
 8004600:	4625      	mov	r5, r4
 8004602:	4628      	mov	r0, r5
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	f000 f81a 	bl	8004640 <_malloc_usable_size_r>
 800460c:	4284      	cmp	r4, r0
 800460e:	4606      	mov	r6, r0
 8004610:	d802      	bhi.n	8004618 <_realloc_r+0x34>
 8004612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004616:	d8f4      	bhi.n	8004602 <_realloc_r+0x1e>
 8004618:	4621      	mov	r1, r4
 800461a:	4638      	mov	r0, r7
 800461c:	f7ff f9bc 	bl	8003998 <_malloc_r>
 8004620:	4680      	mov	r8, r0
 8004622:	b908      	cbnz	r0, 8004628 <_realloc_r+0x44>
 8004624:	4645      	mov	r5, r8
 8004626:	e7ec      	b.n	8004602 <_realloc_r+0x1e>
 8004628:	42b4      	cmp	r4, r6
 800462a:	4622      	mov	r2, r4
 800462c:	4629      	mov	r1, r5
 800462e:	bf28      	it	cs
 8004630:	4632      	movcs	r2, r6
 8004632:	f7ff ffc9 	bl	80045c8 <memcpy>
 8004636:	4629      	mov	r1, r5
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff f943 	bl	80038c4 <_free_r>
 800463e:	e7f1      	b.n	8004624 <_realloc_r+0x40>

08004640 <_malloc_usable_size_r>:
 8004640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004644:	1f18      	subs	r0, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfbc      	itt	lt
 800464a:	580b      	ldrlt	r3, [r1, r0]
 800464c:	18c0      	addlt	r0, r0, r3
 800464e:	4770      	bx	lr

08004650 <_init>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr

0800465c <_fini>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr
